
P2 - Digital Multimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013578  08004a40  08004a40  00005a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017fb8  08017fb8  00019070  2**0
                  CONTENTS
  4 .ARM          00000008  08017fb8  08017fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017fc0  08017fc0  00019070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017fc0  08017fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017fc4  08017fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08017fc8  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000518c  20000070  08018038  00019070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051fc  08018038  000191fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000822e  00000000  00000000  000190a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5f  00000000  00000000  000212ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00022e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000484  00000000  00000000  00023560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002597b  00000000  00000000  000239e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c0c  00000000  00000000  0004935f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e391a  00000000  00000000  00051f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00135885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020f4  00000000  00000000  00135938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00137a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000392e  00000000  00000000  00137a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000128  00000000  00000000  0013b3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a28 	.word	0x08004a28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004a28 	.word	0x08004a28

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	@ (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <collect_samples>:
#include "ADC.h"

volatile uint16_t ADC_result = 0;
volatile uint8_t global_flag = 0;

void collect_samples(uint16_t *store_array, uint16_t sample_size){
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	81fb      	strh	r3, [r7, #14]
	while(idx < sample_size){
 8000c94:	e013      	b.n	8000cbe <collect_samples+0x3a>
		 while(global_flag != FLAG){}; //wait for global flag
 8000c96:	bf00      	nop
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <collect_samples+0x54>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d1fa      	bne.n	8000c98 <collect_samples+0x14>
			store_array[idx] = ADC_result; //store the value in the array
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <collect_samples+0x58>)
 8000cac:	8812      	ldrh	r2, [r2, #0]
 8000cae:	b292      	uxth	r2, r2
 8000cb0:	801a      	strh	r2, [r3, #0]
			global_flag = NO_FLAG; //reset flag
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <collect_samples+0x54>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			idx++;
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	81fb      	strh	r3, [r7, #14]
	while(idx < sample_size){
 8000cbe:	89fa      	ldrh	r2, [r7, #14]
 8000cc0:	887b      	ldrh	r3, [r7, #2]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d3e7      	bcc.n	8000c96 <collect_samples+0x12>
	}
	idx = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	81fb      	strh	r3, [r7, #14]
	return; //samples have been collected
 8000cca:	bf00      	nop
}
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2000008e 	.word	0x2000008e
 8000cdc:	2000008c 	.word	0x2000008c

08000ce0 <ADC1_2_IRQHandler>:

/**
  * @brief Handle Interrupts
  * @retval None
  */
void ADC1_2_IRQHandler(void){
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
	 //check end of conversion flag
	 if (ADC1->ISR & ADC_ISR_EOC) {
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <ADC1_2_IRQHandler+0x38>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00d      	beq.n	8000d0c <ADC1_2_IRQHandler+0x2c>
	        ADC_result = ADC1->DR; //save digital conversion
 8000cf0:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <ADC1_2_IRQHandler+0x38>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <ADC1_2_IRQHandler+0x3c>)
 8000cf8:	801a      	strh	r2, [r3, #0]
	        ADC1->ISR |= ADC_ISR_EOC; //clear EOC flag
 8000cfa:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <ADC1_2_IRQHandler+0x38>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a06      	ldr	r2, [pc, #24]	@ (8000d18 <ADC1_2_IRQHandler+0x38>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6013      	str	r3, [r2, #0]
	        global_flag = FLAG;	//set global flag
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <ADC1_2_IRQHandler+0x40>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
	 }
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	50040000 	.word	0x50040000
 8000d1c:	2000008c 	.word	0x2000008c
 8000d20:	2000008e 	.word	0x2000008e

08000d24 <print_voltage>:

/**
  * @brief Print Voltage
  * @retval None
  */
void print_voltage(uint16_t voltage_mv){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
	char volt_str[5];

	//convert to digits
	uint8_t ones = voltage_mv / VDIV_ONES;
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4a29      	ldr	r2, [pc, #164]	@ (8000dd8 <print_voltage+0xb4>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	099b      	lsrs	r3, r3, #6
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	73fb      	strb	r3, [r7, #15]
	uint8_t tenths = (voltage_mv % VDIV_ONES) / VDIV_TENTHS;
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	4a26      	ldr	r2, [pc, #152]	@ (8000dd8 <print_voltage+0xb4>)
 8000d40:	fba2 1203 	umull	r1, r2, r2, r3
 8000d44:	0992      	lsrs	r2, r2, #6
 8000d46:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d4a:	fb01 f202 	mul.w	r2, r1, r2
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4a22      	ldr	r2, [pc, #136]	@ (8000ddc <print_voltage+0xb8>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	095b      	lsrs	r3, r3, #5
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	73bb      	strb	r3, [r7, #14]
	uint8_t hundredths = ((voltage_mv % VDIV_TENTHS)+ROUND_FACTOR) / VDIV_HUNDREDTHS; //+5 rounding factor
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4a1e      	ldr	r2, [pc, #120]	@ (8000ddc <print_voltage+0xb8>)
 8000d62:	fba2 1203 	umull	r1, r2, r2, r3
 8000d66:	0952      	lsrs	r2, r2, #5
 8000d68:	2164      	movs	r1, #100	@ 0x64
 8000d6a:	fb01 f202 	mul.w	r2, r1, r2
 8000d6e:	1a9b      	subs	r3, r3, r2
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	3305      	adds	r3, #5
 8000d74:	4a1a      	ldr	r2, [pc, #104]	@ (8000de0 <print_voltage+0xbc>)
 8000d76:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7a:	1092      	asrs	r2, r2, #2
 8000d7c:	17db      	asrs	r3, r3, #31
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	737b      	strb	r3, [r7, #13]

	// Adjust for overflow caused by rounding
	if (hundredths > 9) {
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d90d      	bls.n	8000da4 <print_voltage+0x80>
		hundredths = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	737b      	strb	r3, [r7, #13]
		if (tenths < 9) {
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d803      	bhi.n	8000d9a <print_voltage+0x76>
			tenths++;
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73bb      	strb	r3, [r7, #14]
 8000d98:	e004      	b.n	8000da4 <print_voltage+0x80>
		} else {
			tenths = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73bb      	strb	r3, [r7, #14]
			ones++;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	3301      	adds	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
		}
	}
	//convert voltage to a string
	volt_str[0] = ('0' + ones);
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	3330      	adds	r3, #48	@ 0x30
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	723b      	strb	r3, [r7, #8]
	volt_str[1] = '.';
 8000dac:	232e      	movs	r3, #46	@ 0x2e
 8000dae:	727b      	strb	r3, [r7, #9]
	volt_str[2] = ('0' + tenths);
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	3330      	adds	r3, #48	@ 0x30
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	72bb      	strb	r3, [r7, #10]
	volt_str[3] = ('0' + hundredths);
 8000db8:	7b7b      	ldrb	r3, [r7, #13]
 8000dba:	3330      	adds	r3, #48	@ 0x30
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	72fb      	strb	r3, [r7, #11]
	volt_str[4] = '\0';
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	733b      	strb	r3, [r7, #12]

	//print to UART
	UART_print(volt_str);
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f97d 	bl	80010c8 <UART_print>
	return;
 8000dce:	bf00      	nop
}
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	10624dd3 	.word	0x10624dd3
 8000ddc:	51eb851f 	.word	0x51eb851f
 8000de0:	66666667 	.word	0x66666667

08000de4 <get_avg>:

/**
  * @brief Get Avg of 20 Values
  * @retval uint16_t
  */
uint16_t get_avg(uint16_t *store_array, uint16_t sample_size){
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
	uint32_t sum = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < sample_size; i++){
 8000df4:	2300      	movs	r3, #0
 8000df6:	827b      	strh	r3, [r7, #18]
 8000df8:	e00b      	b.n	8000e12 <get_avg+0x2e>
		sum += store_array[i];
 8000dfa:	8a7b      	ldrh	r3, [r7, #18]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	4413      	add	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < sample_size; i++){
 8000e0c:	8a7b      	ldrh	r3, [r7, #18]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	827b      	strh	r3, [r7, #18]
 8000e12:	8a7a      	ldrh	r2, [r7, #18]
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3ef      	bcc.n	8000dfa <get_avg+0x16>
	}
	uint32_t avg = sum/sample_size;
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	60fb      	str	r3, [r7, #12]
	//calibrate to get mV value
	avg = (avg*VREF)/BIT_SIZE;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000e2a:	fb03 f202 	mul.w	r2, r3, r2
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <get_avg+0x80>)
 8000e30:	fba3 1302 	umull	r1, r3, r3, r2
 8000e34:	1ad2      	subs	r2, r2, r3
 8000e36:	0852      	lsrs	r2, r2, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	0adb      	lsrs	r3, r3, #11
 8000e3c:	60fb      	str	r3, [r7, #12]
	avg = (LR_SCALE*avg-LR_OFFSET)/LR_DIVISOR; //linear regression
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f642 0219 	movw	r2, #10265	@ 0x2819
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	3b0d      	subs	r3, #13
 8000e4a:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <get_avg+0x84>)
 8000e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e50:	0b5b      	lsrs	r3, r3, #13
 8000e52:	60fb      	str	r3, [r7, #12]
	return avg;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	b29b      	uxth	r3, r3
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	00100101 	.word	0x00100101
 8000e68:	d1b71759 	.word	0xd1b71759

08000e6c <get_min>:

/**
  * @brief Get Min of 20 Values
  * @retval uint16_t
  */
uint16_t get_min(uint16_t *store_array, uint16_t sample_size){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
	uint32_t min = store_array[0];
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
		for(uint16_t i = 1; i < sample_size; i++){
 8000e7e:	2301      	movs	r3, #1
 8000e80:	817b      	strh	r3, [r7, #10]
 8000e82:	e011      	b.n	8000ea8 <get_min+0x3c>
			if(store_array[i]<min){
 8000e84:	897b      	ldrh	r3, [r7, #10]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d905      	bls.n	8000ea2 <get_min+0x36>
				min = store_array[i];
 8000e96:	897b      	ldrh	r3, [r7, #10]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
		for(uint16_t i = 1; i < sample_size; i++){
 8000ea2:	897b      	ldrh	r3, [r7, #10]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	817b      	strh	r3, [r7, #10]
 8000ea8:	897a      	ldrh	r2, [r7, #10]
 8000eaa:	887b      	ldrh	r3, [r7, #2]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3e9      	bcc.n	8000e84 <get_min+0x18>
			}
		}
		//calibrate to get mV value
		min = (min*VREF)/BIT_SIZE;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000eb6:	fb03 f202 	mul.w	r2, r3, r2
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <get_min+0x90>)
 8000ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec0:	1ad2      	subs	r2, r2, r3
 8000ec2:	0852      	lsrs	r2, r2, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	0adb      	lsrs	r3, r3, #11
 8000ec8:	60fb      	str	r3, [r7, #12]
		min = min != 0 ? (LR_SCALE*min-LR_OFFSET)/LR_DIVISOR : 0;//linear regression
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00a      	beq.n	8000ee6 <get_min+0x7a>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f642 0219 	movw	r2, #10265	@ 0x2819
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	3b0d      	subs	r3, #13
 8000edc:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <get_min+0x94>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0b5b      	lsrs	r3, r3, #13
 8000ee4:	e000      	b.n	8000ee8 <get_min+0x7c>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
		return min;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	b29b      	uxth	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	00100101 	.word	0x00100101
 8000f00:	d1b71759 	.word	0xd1b71759

08000f04 <get_max>:

/**
  * @brief Get Max of 20 Values
  * @retval None
  */
uint16_t get_max(uint16_t *store_array, uint16_t sample_size){
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
	uint32_t max = store_array[0];
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 1; i < sample_size; i++){
 8000f16:	2301      	movs	r3, #1
 8000f18:	817b      	strh	r3, [r7, #10]
 8000f1a:	e011      	b.n	8000f40 <get_max+0x3c>
		if(store_array[i]>max){
 8000f1c:	897b      	ldrh	r3, [r7, #10]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d205      	bcs.n	8000f3a <get_max+0x36>
			max = store_array[i];
 8000f2e:	897b      	ldrh	r3, [r7, #10]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 1; i < sample_size; i++){
 8000f3a:	897b      	ldrh	r3, [r7, #10]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	817b      	strh	r3, [r7, #10]
 8000f40:	897a      	ldrh	r2, [r7, #10]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d3e9      	bcc.n	8000f1c <get_max+0x18>
		}
	}
	//calibrate to get mV value
	max = (max*VREF)/BIT_SIZE;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000f4e:	fb03 f202 	mul.w	r2, r3, r2
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <get_max+0x84>)
 8000f54:	fba3 1302 	umull	r1, r3, r3, r2
 8000f58:	1ad2      	subs	r2, r2, r3
 8000f5a:	0852      	lsrs	r2, r2, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	0adb      	lsrs	r3, r3, #11
 8000f60:	60fb      	str	r3, [r7, #12]
	max = (LR_SCALE*max-LR_OFFSET)/LR_DIVISOR; //linear regression
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f642 0219 	movw	r2, #10265	@ 0x2819
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	3b0d      	subs	r3, #13
 8000f6e:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <get_max+0x88>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	0b5b      	lsrs	r3, r3, #13
 8000f76:	60fb      	str	r3, [r7, #12]
	return max;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	b29b      	uxth	r3, r3
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	00100101 	.word	0x00100101
 8000f8c:	d1b71759 	.word	0xd1b71759

08000f90 <ADC_init>:

/**
  * @brief Initialize ADC
  * @retval None
  */
void ADC_init(void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
	//Enable clocks
	RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN);
 8000f96:	4b49      	ldr	r3, [pc, #292]	@ (80010bc <ADC_init+0x12c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a48      	ldr	r2, [pc, #288]	@ (80010bc <ADC_init+0x12c>)
 8000f9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// set ADC clock to HCLK / 1 synchronous
	ADC123_COMMON->CCR = (1 << ADC_CCR_CKMODE_Pos);
 8000fa2:	4b47      	ldr	r3, [pc, #284]	@ (80010c0 <ADC_init+0x130>)
 8000fa4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fa8:	609a      	str	r2, [r3, #8]

	//power on ADC
	ADC1->CR &= ~(ADC_CR_DEEPPWD);
 8000faa:	4b46      	ldr	r3, [pc, #280]	@ (80010c4 <ADC_init+0x134>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	4a45      	ldr	r2, [pc, #276]	@ (80010c4 <ADC_init+0x134>)
 8000fb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000fb4:	6093      	str	r3, [r2, #8]
	ADC1->CR |=  (ADC_CR_ADVREGEN);
 8000fb6:	4b43      	ldr	r3, [pc, #268]	@ (80010c4 <ADC_init+0x134>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	4a42      	ldr	r2, [pc, #264]	@ (80010c4 <ADC_init+0x134>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6093      	str	r3, [r2, #8]

	// wait for 20 us
	for(uint32_t i = 0; i < DELAY; i++);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	e002      	b.n	8000fce <ADC_init+0x3e>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d9f7      	bls.n	8000fc8 <ADC_init+0x38>

	// Configure DifSel
	// Single ended mode for channel 5 (PA0)
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80010c4 <ADC_init+0x134>)
 8000fda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000fde:	4a39      	ldr	r2, [pc, #228]	@ (80010c4 <ADC_init+0x134>)
 8000fe0:	f023 0320 	bic.w	r3, r3, #32
 8000fe4:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

	// Calibrate the ADC
	// ensure the ADC is disabled and single ended calibration
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);
 8000fe8:	4b36      	ldr	r3, [pc, #216]	@ (80010c4 <ADC_init+0x134>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a35      	ldr	r2, [pc, #212]	@ (80010c4 <ADC_init+0x134>)
 8000fee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000ff2:	f023 0301 	bic.w	r3, r3, #1
 8000ff6:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL;
 8000ff8:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <ADC_init+0x134>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <ADC_init+0x134>)
 8000ffe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001002:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);
 8001004:	bf00      	nop
 8001006:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <ADC_init+0x134>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	dbfb      	blt.n	8001006 <ADC_init+0x76>

	// Enable ADC
	// clear ready bit with a 1
	ADC1->ISR |= (ADC_ISR_ADRDY);
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <ADC_init+0x134>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a2c      	ldr	r2, [pc, #176]	@ (80010c4 <ADC_init+0x134>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6013      	str	r3, [r2, #0]
	ADC1->CR  |= (ADC_CR_ADEN);
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <ADC_init+0x134>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	4a29      	ldr	r2, [pc, #164]	@ (80010c4 <ADC_init+0x134>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6093      	str	r3, [r2, #8]

	// wait for ADRDY to be 1
	while (!(ADC1->ISR & ADC_ISR_ADRDY));
 8001026:	bf00      	nop
 8001028:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <ADC_init+0x134>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f9      	beq.n	8001028 <ADC_init+0x98>

	// Configure Sequence
	// Single channel (5) in sequence
	ADC1->SQR1 = (5 << ADC_SQR1_SQ1_Pos);
 8001034:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <ADC_init+0x134>)
 8001036:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800103a:	631a      	str	r2, [r3, #48]	@ 0x30

	// Configure resolution / data alignment
	// Single conversion mode, 12-bit, right aligned
	ADC1->CFGR = 0;
 800103c:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <ADC_init+0x134>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]

	//configure sample time of 640.6 CC
	ADC1->SMPR1 &= ~(ADC_SMPR1_SMP0);
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <ADC_init+0x134>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a1f      	ldr	r2, [pc, #124]	@ (80010c4 <ADC_init+0x134>)
 8001048:	f023 0307 	bic.w	r3, r3, #7
 800104c:	6153      	str	r3, [r2, #20]
	ADC1->SMPR1 |= (ADC_SMPR1_SMP0); //set to 640.5 CC
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <ADC_init+0x134>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a1c      	ldr	r2, [pc, #112]	@ (80010c4 <ADC_init+0x134>)
 8001054:	f043 0307 	orr.w	r3, r3, #7
 8001058:	6153      	str	r3, [r2, #20]

	//configure interrupt
	ADC1->IER |= (ADC_IER_EOCIE);
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <ADC_init+0x134>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a19      	ldr	r2, [pc, #100]	@ (80010c4 <ADC_init+0x134>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6053      	str	r3, [r2, #4]
	NVIC_EnableIRQ(ADC1_2_IRQn);
 8001066:	2012      	movs	r0, #18
 8001068:	f7ff fdee 	bl	8000c48 <__NVIC_EnableIRQ>

	/*-----configure GPIO pin (PA0)-----*/
	//configure GPIOA clock
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOAEN);
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <ADC_init+0x12c>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <ADC_init+0x12c>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	64d3      	str	r3, [r2, #76]	@ 0x4c
	//setup MODER to Analog input
	GPIOA->MODER |= (GPIO_MODER_MODE0);
 8001078:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001082:	f043 0303 	orr.w	r3, r3, #3
 8001086:	6013      	str	r3, [r2, #0]
	//no PUPD
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);
 8001088:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001092:	f023 0303 	bic.w	r3, r3, #3
 8001096:	60d3      	str	r3, [r2, #12]
	//set ASC
	GPIOA->ASCR |= (GPIO_ASCR_ASC0);
 8001098:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800109c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

	//start a conversion
	ADC1->CR |= ADC_CR_ADSTART;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <ADC_init+0x134>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <ADC_init+0x134>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6093      	str	r3, [r2, #8]
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	50040300 	.word	0x50040300
 80010c4:	50040000 	.word	0x50040000

080010c8 <UART_print>:
 *      Author: firaz
 */
#include "main.h"
#include "UART.h"

void UART_print(char *out_str){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	//check string
	if(out_str == NULL){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d013      	beq.n	80010fe <UART_print+0x36>
		return;
	}
	//check character isn't null terminator
	while(*out_str != '\0'){
 80010d6:	e00d      	b.n	80010f4 <UART_print+0x2c>
		//wait for transmission flag
		while(!(USART2->ISR & USART_ISR_TXE));
 80010d8:	bf00      	nop
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <UART_print+0x44>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f9      	beq.n	80010da <UART_print+0x12>
		USART2->TDR = *out_str; //write string to USART
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <UART_print+0x44>)
 80010ec:	851a      	strh	r2, [r3, #40]	@ 0x28
		out_str++; //increment string pointer
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3301      	adds	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
	while(*out_str != '\0'){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1ed      	bne.n	80010d8 <UART_print+0x10>
 80010fc:	e000      	b.n	8001100 <UART_print+0x38>
		return;
 80010fe:	bf00      	nop
	}
}
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40004400 	.word	0x40004400

08001110 <UART_init>:

void UART_init(void){
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA and USART
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001114:	4b3a      	ldr	r3, [pc, #232]	@ (8001200 <UART_init+0xf0>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	4a39      	ldr	r2, [pc, #228]	@ (8001200 <UART_init+0xf0>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8001120:	4b37      	ldr	r3, [pc, #220]	@ (8001200 <UART_init+0xf0>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001124:	4a36      	ldr	r2, [pc, #216]	@ (8001200 <UART_init+0xf0>)
 8001126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112a:	6593      	str	r3, [r2, #88]	@ 0x58

	//Set GPIOA2 & GPIOA3 to alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 800112c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800113a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 800113c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001146:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800114a:	6013      	str	r3, [r2, #0]

	//Enable alternate functionality
	GPIOA-> AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 800114c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800115a:	6213      	str	r3, [r2, #32]
	GPIOA-> AFR[0] |= ((0x7UL << GPIO_AFRL_AFSEL2_Pos) | (0x7UL << GPIO_AFRL_AFSEL3_Pos));
 800115c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001166:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800116a:	6213      	str	r3, [r2, #32]

	//Set no PUPD
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 800116c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001176:	f023 030c 	bic.w	r3, r3, #12
 800117a:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 800117c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001186:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800118a:	60d3      	str	r3, [r2, #12]

	//Set GPIOA speed to high
	GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 800118c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001196:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 800119a:	6093      	str	r3, [r2, #8]

	//USART setup
	//Disable UE to set M0, M1, BRR, STOP,
	USART2->CR1 &= ~(USART_CR1_UE);
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <UART_init+0xf4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a18      	ldr	r2, [pc, #96]	@ (8001204 <UART_init+0xf4>)
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]
	//Set M0, M1 for 8 bit word
	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <UART_init+0xf4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a15      	ldr	r2, [pc, #84]	@ (8001204 <UART_init+0xf4>)
 80011ae:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80011b2:	6013      	str	r3, [r2, #0]
	//Set stop bit to 1 bit
	USART2->CR2 &= ~(USART_CR2_STOP);
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <UART_init+0xf4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <UART_init+0xf4>)
 80011ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011be:	6053      	str	r3, [r2, #4]
	//BRR set baud rate 24MHz/115.2Kbps
	USART2->BRR = (CLOCK_SPEED/BAUD_RATE);
 80011c0:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <UART_init+0xf4>)
 80011c2:	22d0      	movs	r2, #208	@ 0xd0
 80011c4:	60da      	str	r2, [r3, #12]
	//RE - receiver enable
	USART2->CR1 |= (USART_CR1_RE);
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <UART_init+0xf4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <UART_init+0xf4>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6013      	str	r3, [r2, #0]
	//Set oversampling mode
	USART2->CR1 &= ~(USART_CR1_OVER8);
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <UART_init+0xf4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <UART_init+0xf4>)
 80011d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80011dc:	6013      	str	r3, [r2, #0]
	//UE - USART enable
	USART2->CR1 |= (USART_CR1_UE);
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <UART_init+0xf4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <UART_init+0xf4>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6013      	str	r3, [r2, #0]
	//TE - transmit enable  RE - Receive enable
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <UART_init+0xf4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <UART_init+0xf4>)
 80011f0:	f043 030c 	orr.w	r3, r3, #12
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40021000 	.word	0x40021000
 8001204:	40004400 	.word	0x40004400

08001208 <main>:
void compute_fft(uint16_t *samples, uint16_t dc_offset);
uint16_t compute_vrms(uint16_t samples[], uint16_t num_samples, uint16_t dc_offset);
void SystemClock_Config(void);

int main(void)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	f5ad 5dfe 	sub.w	sp, sp, #8128	@ 0x1fc0
 800120e:	b081      	sub	sp, #4
 8001210:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f000 fdda 	bl	8001dca <HAL_Init>
  SystemClock_Config();
 8001216:	f000 fc6d 	bl	8001af4 <SystemClock_Config>

  //initialize FFT, ADC, timer,and UART
  arm_rfft_fast_init_f32(&fftHandler, FFT_SIZE);
 800121a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800121e:	48cf      	ldr	r0, [pc, #828]	@ (800155c <main+0x354>)
 8001220:	f001 fd5a 	bl	8002cd8 <arm_rfft_fast_init_f32>
  ADC_init();
 8001224:	f7ff feb4 	bl	8000f90 <ADC_init>
  TIM2_init();
 8001228:	f000 fd6a 	bl	8001d00 <TIM2_init>
  UART_init();
 800122c:	f7ff ff70 	bl	8001110 <UART_init>

  //sampling arrays for AC and DC
  uint16_t ac_samples[FFT_SIZE] = {0};
 8001230:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001234:	3b1c      	subs	r3, #28
 8001236:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fe4b 	bl	8003ed8 <memset>
  uint16_t dc_samples[DC_SAMPLE_SIZE] = {0};
 8001242:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001246:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800124a:	4618      	mov	r0, r3
 800124c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001250:	461a      	mov	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f002 fe40 	bl	8003ed8 <memset>

  //reset screen and cursor
  UART_print("\x1B[2J");
 8001258:	48c1      	ldr	r0, [pc, #772]	@ (8001560 <main+0x358>)
 800125a:	f7ff ff35 	bl	80010c8 <UART_print>
  UART_print("\x1B[H");
 800125e:	48c1      	ldr	r0, [pc, #772]	@ (8001564 <main+0x35c>)
 8001260:	f7ff ff32 	bl	80010c8 <UART_print>
  while (1)
  {
	  //collect AC and DC samples
	  //ac_sampling = SAMPLE;
	  collect_samples(ac_samples, FFT_SIZE);
 8001264:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001268:	3b1c      	subs	r3, #28
 800126a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fd08 	bl	8000c84 <collect_samples>
	  //ac_sampling = NO_SAMPLE;
	  dc_sampling = SAMPLE; //still may not work. Double check this
 8001274:	4bbc      	ldr	r3, [pc, #752]	@ (8001568 <main+0x360>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
	  collect_samples(dc_samples, DC_SAMPLE_SIZE);
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	3b1c      	subs	r3, #28
 8001280:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fcfd 	bl	8000c84 <collect_samples>
	  dc_sampling = NO_SAMPLE;
 800128a:	4bb7      	ldr	r3, [pc, #732]	@ (8001568 <main+0x360>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]

	  //offset to remove for FFT calculation
	  uint16_t offset = get_avg(ac_samples, FFT_SIZE);
 8001290:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001294:	3b1c      	subs	r3, #28
 8001296:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fda2 	bl	8000de4 <get_avg>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80012a6:	f102 0212 	add.w	r2, r2, #18
 80012aa:	8013      	strh	r3, [r2, #0]

	  //compute fft and perform calculations
	  compute_fft(ac_samples, offset);
 80012ac:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80012b0:	f103 0312 	add.w	r3, r3, #18
 80012b4:	881a      	ldrh	r2, [r3, #0]
 80012b6:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80012ba:	3b1c      	subs	r3, #28
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 faa0 	bl	8001804 <compute_fft>
	  uint16_t peak_freq = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80012ca:	f102 021e 	add.w	r2, r2, #30
 80012ce:	8013      	strh	r3, [r2, #0]
	  float max_magnitude = 0.0f;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80012d8:	f102 0218 	add.w	r2, r2, #24
 80012dc:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i<FFT_SIZE/2;i++){
 80012de:	2300      	movs	r3, #0
 80012e0:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80012e4:	f102 0214 	add.w	r2, r2, #20
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e051      	b.n	8001390 <main+0x188>
		  uint16_t cur_freq = (uint16_t)(i * SAMPLE_RATE_HZ / ((float)FFT_SIZE));
 80012ec:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80012f0:	f103 0314 	add.w	r3, r3, #20
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012fa:	fb02 f303 	mul.w	r3, r2, r3
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001306:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800156c <main+0x364>
 800130a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001312:	ee17 3a90 	vmov	r3, s15
 8001316:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 800131a:	f102 0204 	add.w	r2, r2, #4
 800131e:	8013      	strh	r3, [r2, #0]
		  //get peak frequency through magnitude
		  if (freq_mag[i] > max_magnitude) {
 8001320:	4a93      	ldr	r2, [pc, #588]	@ (8001570 <main+0x368>)
 8001322:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001326:	f103 0314 	add.w	r3, r3, #20
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001338:	f103 0318 	add.w	r3, r3, #24
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	d517      	bpl.n	800137a <main+0x172>
			  max_magnitude = freq_mag[i];
 800134a:	4a89      	ldr	r2, [pc, #548]	@ (8001570 <main+0x368>)
 800134c:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001350:	f103 0314 	add.w	r3, r3, #20
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001360:	f102 0218 	add.w	r2, r2, #24
 8001364:	6013      	str	r3, [r2, #0]
			  peak_freq = cur_freq;
 8001366:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 800136a:	f103 0304 	add.w	r3, r3, #4
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001374:	f102 021e 	add.w	r2, r2, #30
 8001378:	8013      	strh	r3, [r2, #0]
	  for(int i = 0; i<FFT_SIZE/2;i++){
 800137a:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 800137e:	f103 0314 	add.w	r3, r3, #20
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 800138a:	f102 0214 	add.w	r2, r2, #20
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001394:	f103 0314 	add.w	r3, r3, #20
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800139e:	dba5      	blt.n	80012ec <main+0xe4>
		  }
	  }

	  //compute and refine DC measurement
	  uint16_t vdc = (get_max(dc_samples, DC_SAMPLE_SIZE)+get_min(dc_samples, DC_SAMPLE_SIZE))/2;
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	3b1c      	subs	r3, #28
 80013a6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fdaa 	bl	8000f04 <get_max>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461c      	mov	r4, r3
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	3b1c      	subs	r3, #28
 80013ba:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fd54 	bl	8000e6c <get_min>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4423      	add	r3, r4
 80013c8:	0fda      	lsrs	r2, r3, #31
 80013ca:	4413      	add	r3, r2
 80013cc:	105b      	asrs	r3, r3, #1
 80013ce:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80013d2:	f102 0210 	add.w	r2, r2, #16
 80013d6:	8013      	strh	r3, [r2, #0]
	  vdc = refine_volt(vdc,dc_samples,DC_SAMPLE_SIZE);
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	3b1c      	subs	r3, #28
 80013de:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80013e2:	f102 0210 	add.w	r2, r2, #16
 80013e6:	8810      	ldrh	r0, [r2, #0]
 80013e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013ec:	4619      	mov	r1, r3
 80013ee:	f000 f903 	bl	80015f8 <refine_volt>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80013f8:	f102 0210 	add.w	r2, r2, #16
 80013fc:	8013      	strh	r3, [r2, #0]

	  //compute and refine AC measurements
	  uint16_t ac_max = get_max(ac_samples, FFT_SIZE);
 80013fe:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001402:	3b1c      	subs	r3, #28
 8001404:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fd7b 	bl	8000f04 <get_max>
 800140e:	4603      	mov	r3, r0
 8001410:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001414:	f102 020e 	add.w	r2, r2, #14
 8001418:	8013      	strh	r3, [r2, #0]
	  uint16_t ac_min = get_min(ac_samples, FFT_SIZE);
 800141a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800141e:	3b1c      	subs	r3, #28
 8001420:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fd21 	bl	8000e6c <get_min>
 800142a:	4603      	mov	r3, r0
 800142c:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001430:	f102 020c 	add.w	r2, r2, #12
 8001434:	8013      	strh	r3, [r2, #0]
	  uint16_t vpp = (ac_max - ac_min);
 8001436:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 800143a:	f103 030e 	add.w	r3, r3, #14
 800143e:	881a      	ldrh	r2, [r3, #0]
 8001440:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001444:	f103 030c 	add.w	r3, r3, #12
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001450:	f102 020a 	add.w	r2, r2, #10
 8001454:	8013      	strh	r3, [r2, #0]
	  vpp = vpp>99 ? refine_volt(vpp,ac_samples,FFT_SIZE): 0;
 8001456:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 800145a:	f103 030a 	add.w	r3, r3, #10
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	2b63      	cmp	r3, #99	@ 0x63
 8001462:	d90e      	bls.n	8001482 <main+0x27a>
 8001464:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001468:	3b1c      	subs	r3, #28
 800146a:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 800146e:	f102 020a 	add.w	r2, r2, #10
 8001472:	8810      	ldrh	r0, [r2, #0]
 8001474:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001478:	4619      	mov	r1, r3
 800147a:	f000 f8bd 	bl	80015f8 <refine_volt>
 800147e:	4603      	mov	r3, r0
 8001480:	e000      	b.n	8001484 <main+0x27c>
 8001482:	2300      	movs	r3, #0
 8001484:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001488:	f102 020a 	add.w	r2, r2, #10
 800148c:	8013      	strh	r3, [r2, #0]
	  uint16_t vrms = compute_vrms(ac_samples, FFT_SIZE, offset);
 800148e:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001492:	f103 0312 	add.w	r3, r3, #18
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800149c:	3b1c      	subs	r3, #28
 800149e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f91c 	bl	80016e0 <compute_vrms>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80014ae:	f102 0208 	add.w	r2, r2, #8
 80014b2:	8013      	strh	r3, [r2, #0]
	  vrms = vpp > 0 ? refine_volt(vrms,ac_samples,FFT_SIZE): 0;
 80014b4:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80014b8:	f103 030a 	add.w	r3, r3, #10
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00e      	beq.n	80014e0 <main+0x2d8>
 80014c2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80014c6:	3b1c      	subs	r3, #28
 80014c8:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80014cc:	f102 0208 	add.w	r2, r2, #8
 80014d0:	8810      	ldrh	r0, [r2, #0]
 80014d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d6:	4619      	mov	r1, r3
 80014d8:	f000 f88e 	bl	80015f8 <refine_volt>
 80014dc:	4603      	mov	r3, r0
 80014de:	e000      	b.n	80014e2 <main+0x2da>
 80014e0:	2300      	movs	r3, #0
 80014e2:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80014e6:	f102 0208 	add.w	r2, r2, #8
 80014ea:	8013      	strh	r3, [r2, #0]

	  //calibrate frequency
	  uint16_t calibrated_freq = vpp > 10 ? ((SCALED_SLOPE * peak_freq)/ SCALING_FACTOR)+ SCALED_INTERCEPT: 0;
 80014ec:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80014f0:	f103 030a 	add.w	r3, r3, #10
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	2b0a      	cmp	r3, #10
 80014f8:	d912      	bls.n	8001520 <main+0x318>
 80014fa:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80014fe:	f103 031e 	add.w	r3, r3, #30
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	f242 7260 	movw	r2, #10080	@ 0x2760
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	4a19      	ldr	r2, [pc, #100]	@ (8001574 <main+0x36c>)
 800150e:	fb82 1203 	smull	r1, r2, r2, r3
 8001512:	1312      	asrs	r2, r2, #12
 8001514:	17db      	asrs	r3, r3, #31
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b29b      	uxth	r3, r3
 800151a:	3301      	adds	r3, #1
 800151c:	b29b      	uxth	r3, r3
 800151e:	e000      	b.n	8001522 <main+0x31a>
 8001520:	2300      	movs	r3, #0
 8001522:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001526:	f102 0206 	add.w	r2, r2, #6
 800152a:	8013      	strh	r3, [r2, #0]

	  //output to terminal
	  output_measurements(calibrated_freq, vdc, vpp, vrms);
 800152c:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001530:	f103 0308 	add.w	r3, r3, #8
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 800153a:	f102 020a 	add.w	r2, r2, #10
 800153e:	8812      	ldrh	r2, [r2, #0]
 8001540:	f507 51fd 	add.w	r1, r7, #8096	@ 0x1fa0
 8001544:	f101 0110 	add.w	r1, r1, #16
 8001548:	8809      	ldrh	r1, [r1, #0]
 800154a:	f507 50fd 	add.w	r0, r7, #8096	@ 0x1fa0
 800154e:	f100 0006 	add.w	r0, r0, #6
 8001552:	8800      	ldrh	r0, [r0, #0]
 8001554:	f000 f9a6 	bl	80018a4 <output_measurements>
  {
 8001558:	e684      	b.n	8001264 <main+0x5c>
 800155a:	bf00      	nop
 800155c:	20005094 	.word	0x20005094
 8001560:	08004a40 	.word	0x08004a40
 8001564:	08004a48 	.word	0x08004a48
 8001568:	20005090 	.word	0x20005090
 800156c:	45000000 	.word	0x45000000
 8001570:	20004090 	.word	0x20004090
 8001574:	68db8bad 	.word	0x68db8bad

08001578 <TIM2_IRQHandler>:

/**
  * @brief Timer 2 interrupt handler
  * @retval None
  */
void TIM2_IRQHandler(void){
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
	//check for update event flag of ARR
	if (TIM2->SR & TIM_SR_UIF){
 800157c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d013      	beq.n	80015b2 <TIM2_IRQHandler+0x3a>
		if (!dc_sampling){ //figure this out
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <TIM2_IRQHandler+0x78>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d105      	bne.n	80015a0 <TIM2_IRQHandler+0x28>
			ADC1->CR |= ADC_CR_ADSTART;
 8001594:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <TIM2_IRQHandler+0x7c>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a16      	ldr	r2, [pc, #88]	@ (80015f4 <TIM2_IRQHandler+0x7c>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6093      	str	r3, [r2, #8]
		}
		//clear update event interrupt flag
		TIM2->SR &= ~(TIM_SR_UIF);
 80015a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6113      	str	r3, [r2, #16]
			ADC1->CR |= ADC_CR_ADSTART;
		}
		//clear and update CCR1 flag
		TIM2->SR &= ~(TIM_SR_CC1IF);
	}
}
 80015b0:	e019      	b.n	80015e6 <TIM2_IRQHandler+0x6e>
	else if (TIM2->SR & TIM_SR_CC1IF){
 80015b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d012      	beq.n	80015e6 <TIM2_IRQHandler+0x6e>
		if (dc_sampling){
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <TIM2_IRQHandler+0x78>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <TIM2_IRQHandler+0x5e>
			ADC1->CR |= ADC_CR_ADSTART;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <TIM2_IRQHandler+0x7c>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <TIM2_IRQHandler+0x7c>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6093      	str	r3, [r2, #8]
		TIM2->SR &= ~(TIM_SR_CC1IF);
 80015d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e0:	f023 0302 	bic.w	r3, r3, #2
 80015e4:	6113      	str	r3, [r2, #16]
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	20005090 	.word	0x20005090
 80015f4:	50040000 	.word	0x50040000

080015f8 <refine_volt>:

/**
  * @brief Improve Accuracy of voltages
  * @retval None
  */
uint16_t refine_volt(uint16_t voltage, uint16_t *array, uint16_t array_size){
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	@ 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	4613      	mov	r3, r2
 8001606:	80bb      	strh	r3, [r7, #4]
	uint16_t top_nums[REFINE_VAL] = {0};
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	811a      	strh	r2, [r3, #8]
	uint16_t idx = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	83fb      	strh	r3, [r7, #30]
	for (int i = 0; i < array_size; i++) {
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	e028      	b.n	8001670 <refine_volt+0x78>
		if (abs(array[i] - voltage) < 10) {
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	4413      	add	r3, r2
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f113 0f09 	cmn.w	r3, #9
 8001632:	db1a      	blt.n	800166a <refine_volt+0x72>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b09      	cmp	r3, #9
 8001646:	dc10      	bgt.n	800166a <refine_volt+0x72>
	            if (idx < REFINE_VAL) {
 8001648:	8bfb      	ldrh	r3, [r7, #30]
 800164a:	2b04      	cmp	r3, #4
 800164c:	d815      	bhi.n	800167a <refine_volt+0x82>
	                top_nums[idx] = array[i];
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	441a      	add	r2, r3
 8001656:	8bfb      	ldrh	r3, [r7, #30]
 8001658:	8812      	ldrh	r2, [r2, #0]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	3320      	adds	r3, #32
 800165e:	443b      	add	r3, r7
 8001660:	f823 2c18 	strh.w	r2, [r3, #-24]
	                idx++;
 8001664:	8bfb      	ldrh	r3, [r7, #30]
 8001666:	3301      	adds	r3, #1
 8001668:	83fb      	strh	r3, [r7, #30]
	for (int i = 0; i < array_size; i++) {
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	3301      	adds	r3, #1
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	88bb      	ldrh	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbd2      	blt.n	800161e <refine_volt+0x26>
 8001678:	e00b      	b.n	8001692 <refine_volt+0x9a>
	            } else {
	                break;  // Stop once refine amount reached
 800167a:	bf00      	nop
	            }
	        }
	    }

		//add voltage to array if refine amount is not reached
	    while (idx < REFINE_VAL) {
 800167c:	e009      	b.n	8001692 <refine_volt+0x9a>
	        top_nums[idx] = voltage;
 800167e:	8bfb      	ldrh	r3, [r7, #30]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	3320      	adds	r3, #32
 8001684:	443b      	add	r3, r7
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	f823 2c18 	strh.w	r2, [r3, #-24]
	        idx++;
 800168c:	8bfb      	ldrh	r3, [r7, #30]
 800168e:	3301      	adds	r3, #1
 8001690:	83fb      	strh	r3, [r7, #30]
	    while (idx < REFINE_VAL) {
 8001692:	8bfb      	ldrh	r3, [r7, #30]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d9f2      	bls.n	800167e <refine_volt+0x86>
	    }

	    // Return the average of the top numbers closest to the voltage
		uint32_t sum = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
		for(uint16_t i = 0; i < REFINE_VAL; i++){
 800169c:	2300      	movs	r3, #0
 800169e:	827b      	strh	r3, [r7, #18]
 80016a0:	e00c      	b.n	80016bc <refine_volt+0xc4>
			sum += top_nums[i];
 80016a2:	8a7b      	ldrh	r3, [r7, #18]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	3320      	adds	r3, #32
 80016a8:	443b      	add	r3, r7
 80016aa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80016ae:	461a      	mov	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	4413      	add	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]
		for(uint16_t i = 0; i < REFINE_VAL; i++){
 80016b6:	8a7b      	ldrh	r3, [r7, #18]
 80016b8:	3301      	adds	r3, #1
 80016ba:	827b      	strh	r3, [r7, #18]
 80016bc:	8a7b      	ldrh	r3, [r7, #18]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d9ef      	bls.n	80016a2 <refine_volt+0xaa>
		}
	    return sum/REFINE_VAL;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <refine_volt+0xe4>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	b29b      	uxth	r3, r3
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	@ 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	cccccccd 	.word	0xcccccccd

080016e0 <compute_vrms>:

/**
  * @brief Compute RMS voltage of AC signal
  * @retval None
  */
uint16_t compute_vrms(uint16_t samples[], uint16_t num_samples, uint16_t dc_offset) {
 80016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e4:	b089      	sub	sp, #36	@ 0x24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	807b      	strh	r3, [r7, #2]
 80016ee:	4613      	mov	r3, r2
 80016f0:	803b      	strh	r3, [r7, #0]
 80016f2:	466b      	mov	r3, sp
 80016f4:	461e      	mov	r6, r3
	uint32_t sum_of_squares = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
	int16_t voltages[num_samples];
 80016fa:	8879      	ldrh	r1, [r7, #2]
 80016fc:	460b      	mov	r3, r1
 80016fe:	3b01      	subs	r3, #1
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	b28b      	uxth	r3, r1
 8001704:	2200      	movs	r2, #0
 8001706:	4698      	mov	r8, r3
 8001708:	4691      	mov	r9, r2
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001716:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800171a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800171e:	b28b      	uxth	r3, r1
 8001720:	2200      	movs	r2, #0
 8001722:	461c      	mov	r4, r3
 8001724:	4615      	mov	r5, r2
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	012b      	lsls	r3, r5, #4
 8001730:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001734:	0122      	lsls	r2, r4, #4
 8001736:	460b      	mov	r3, r1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	3307      	adds	r3, #7
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	ebad 0d03 	sub.w	sp, sp, r3
 8001744:	466b      	mov	r3, sp
 8001746:	3301      	adds	r3, #1
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	60fb      	str	r3, [r7, #12]

	//convert ADC to voltage values
	for (int i = 0; i < num_samples; i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	e01c      	b.n	800178e <compute_vrms+0xae>
		voltages[i] = (int16_t)((samples[i]*VREF)/BIT_SIZE)-dc_offset;
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	4a25      	ldr	r2, [pc, #148]	@ (8001800 <compute_vrms+0x120>)
 800176a:	fb82 1203 	smull	r1, r2, r2, r3
 800176e:	441a      	add	r2, r3
 8001770:	12d2      	asrs	r2, r2, #11
 8001772:	17db      	asrs	r3, r3, #31
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	b29a      	uxth	r2, r3
 8001778:	883b      	ldrh	r3, [r7, #0]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	b29b      	uxth	r3, r3
 800177e:	b219      	sxth	r1, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < num_samples; i++) {
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	3301      	adds	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	429a      	cmp	r2, r3
 8001794:	dbde      	blt.n	8001754 <compute_vrms+0x74>
	 }

    // Square each sample and accumulate
    for (int i = 0; i < num_samples; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e011      	b.n	80017c0 <compute_vrms+0xe0>
        sum_of_squares += (voltages[i] * voltages[i]);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80017a4:	4619      	mov	r1, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < num_samples; i++) {
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbe9      	blt.n	800179c <compute_vrms+0xbc>
    }

    // Calculate the mean of squares
    uint32_t mean_of_squares = sum_of_squares / num_samples;
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d0:	60bb      	str	r3, [r7, #8]

    // Return the square root of the mean
    return (uint16_t)sqrt(mean_of_squares);
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7fe feee 	bl	80005b4 <__aeabi_ui2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	ec43 2b10 	vmov	d0, r2, r3
 80017e0:	f002 fffa 	bl	80047d8 <sqrt>
 80017e4:	ec53 2b10 	vmov	r2, r3, d0
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff fa0c 	bl	8000c08 <__aeabi_d2uiz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	46b5      	mov	sp, r6
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001800:	80080081 	.word	0x80080081

08001804 <compute_fft>:

/**
  * @brief Compute FFT and update global array
  * @retval None
  */
void compute_fft(uint16_t *samples, uint16_t dc_offset){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
	//convert to float
	for (int i = 0; i < FFT_SIZE; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e024      	b.n	8001860 <compute_fft+0x5c>
		fft_in[i] = (((((float)samples[i]*VREF)/BIT_SIZE)-dc_offset)/1000);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001828:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001888 <compute_fft+0x84>
 800182c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001830:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800188c <compute_fft+0x88>
 8001834:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001842:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001846:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001890 <compute_fft+0x8c>
 800184a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184e:	4a11      	ldr	r2, [pc, #68]	@ (8001894 <compute_fft+0x90>)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < FFT_SIZE; i++) {
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001866:	dbd6      	blt.n	8001816 <compute_fft+0x12>
	 }

	// Perform FFT and perform complex math
	arm_rfft_fast_f32(&fftHandler, fft_in, fft_out, 0);
 8001868:	2300      	movs	r3, #0
 800186a:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <compute_fft+0x94>)
 800186c:	4909      	ldr	r1, [pc, #36]	@ (8001894 <compute_fft+0x90>)
 800186e:	480b      	ldr	r0, [pc, #44]	@ (800189c <compute_fft+0x98>)
 8001870:	f001 fae4 	bl	8002e3c <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, freq_mag, FFT_SIZE/2);
 8001874:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001878:	4909      	ldr	r1, [pc, #36]	@ (80018a0 <compute_fft+0x9c>)
 800187a:	4807      	ldr	r0, [pc, #28]	@ (8001898 <compute_fft+0x94>)
 800187c:	f001 ff44 	bl	8003708 <arm_cmplx_mag_f32>
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	454e4000 	.word	0x454e4000
 800188c:	457ff000 	.word	0x457ff000
 8001890:	447a0000 	.word	0x447a0000
 8001894:	20000090 	.word	0x20000090
 8001898:	20002090 	.word	0x20002090
 800189c:	20005094 	.word	0x20005094
 80018a0:	20004090 	.word	0x20004090

080018a4 <output_measurements>:

/**
  * @brief output measurements
  * @retval None
  */
void output_measurements(uint16_t freq, uint16_t dc_volt, uint16_t pp_volt, uint16_t rms_volt){
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b08b      	sub	sp, #44	@ 0x2c
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4604      	mov	r4, r0
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	80fb      	strh	r3, [r7, #6]
 80018b6:	4603      	mov	r3, r0
 80018b8:	80bb      	strh	r3, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
 80018be:	4613      	mov	r3, r2
 80018c0:	803b      	strh	r3, [r7, #0]
	//convert to string
	char freq_str[DIG_SIZE];
	sprintf(freq_str, "%u", freq);
 80018c2:	88fa      	ldrh	r2, [r7, #6]
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4971      	ldr	r1, [pc, #452]	@ (8001a90 <output_measurements+0x1ec>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fae4 	bl	8003e98 <siprintf>

	//reset screen and cursor
	UART_print("\x1B[2J");
 80018d0:	4870      	ldr	r0, [pc, #448]	@ (8001a94 <output_measurements+0x1f0>)
 80018d2:	f7ff fbf9 	bl	80010c8 <UART_print>
	UART_print("\x1B[H");
 80018d6:	4870      	ldr	r0, [pc, #448]	@ (8001a98 <output_measurements+0x1f4>)
 80018d8:	f7ff fbf6 	bl	80010c8 <UART_print>

	//print frequency, Vdc, Vpp, and Vrms numerical values
	UART_print("Frequency: ");
 80018dc:	486f      	ldr	r0, [pc, #444]	@ (8001a9c <output_measurements+0x1f8>)
 80018de:	f7ff fbf3 	bl	80010c8 <UART_print>
	UART_print(freq_str);
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fbee 	bl	80010c8 <UART_print>
	UART_print("Hz ");
 80018ec:	486c      	ldr	r0, [pc, #432]	@ (8001aa0 <output_measurements+0x1fc>)
 80018ee:	f7ff fbeb 	bl	80010c8 <UART_print>
	UART_print("Vdc: ");
 80018f2:	486c      	ldr	r0, [pc, #432]	@ (8001aa4 <output_measurements+0x200>)
 80018f4:	f7ff fbe8 	bl	80010c8 <UART_print>
	print_voltage(dc_volt);
 80018f8:	88bb      	ldrh	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fa12 	bl	8000d24 <print_voltage>
	UART_print("v");
 8001900:	4869      	ldr	r0, [pc, #420]	@ (8001aa8 <output_measurements+0x204>)
 8001902:	f7ff fbe1 	bl	80010c8 <UART_print>
	UART_print("\x1B[1C");
 8001906:	4869      	ldr	r0, [pc, #420]	@ (8001aac <output_measurements+0x208>)
 8001908:	f7ff fbde 	bl	80010c8 <UART_print>
	UART_print("Vpp: ");
 800190c:	4868      	ldr	r0, [pc, #416]	@ (8001ab0 <output_measurements+0x20c>)
 800190e:	f7ff fbdb 	bl	80010c8 <UART_print>
	print_voltage(pp_volt);
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fa05 	bl	8000d24 <print_voltage>
	UART_print("v");
 800191a:	4863      	ldr	r0, [pc, #396]	@ (8001aa8 <output_measurements+0x204>)
 800191c:	f7ff fbd4 	bl	80010c8 <UART_print>
	UART_print("\x1B[1C");
 8001920:	4862      	ldr	r0, [pc, #392]	@ (8001aac <output_measurements+0x208>)
 8001922:	f7ff fbd1 	bl	80010c8 <UART_print>
	UART_print("Vrms: ");
 8001926:	4863      	ldr	r0, [pc, #396]	@ (8001ab4 <output_measurements+0x210>)
 8001928:	f7ff fbce 	bl	80010c8 <UART_print>
	print_voltage(rms_volt);
 800192c:	883b      	ldrh	r3, [r7, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f9f8 	bl	8000d24 <print_voltage>
	UART_print("v");
 8001934:	485c      	ldr	r0, [pc, #368]	@ (8001aa8 <output_measurements+0x204>)
 8001936:	f7ff fbc7 	bl	80010c8 <UART_print>
	UART_print("\x1B[1C");
 800193a:	485c      	ldr	r0, [pc, #368]	@ (8001aac <output_measurements+0x208>)
 800193c:	f7ff fbc4 	bl	80010c8 <UART_print>
	UART_print("\x1B[2;0H");
 8001940:	485d      	ldr	r0, [pc, #372]	@ (8001ab8 <output_measurements+0x214>)
 8001942:	f7ff fbc1 	bl	80010c8 <UART_print>

	//print DC voltage bar
	UART_print("Vdc  ");
 8001946:	485d      	ldr	r0, [pc, #372]	@ (8001abc <output_measurements+0x218>)
 8001948:	f7ff fbbe 	bl	80010c8 <UART_print>
	UART_print("#");
 800194c:	485c      	ldr	r0, [pc, #368]	@ (8001ac0 <output_measurements+0x21c>)
 800194e:	f7ff fbbb 	bl	80010c8 <UART_print>
	uint16_t bar_idx = 100;
 8001952:	2364      	movs	r3, #100	@ 0x64
 8001954:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(dc_volt > bar_idx){
 8001956:	e005      	b.n	8001964 <output_measurements+0xc0>
	  UART_print("#");
 8001958:	4859      	ldr	r0, [pc, #356]	@ (8001ac0 <output_measurements+0x21c>)
 800195a:	f7ff fbb5 	bl	80010c8 <UART_print>
	  bar_idx += 100;
 800195e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001960:	3364      	adds	r3, #100	@ 0x64
 8001962:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(dc_volt > bar_idx){
 8001964:	88ba      	ldrh	r2, [r7, #4]
 8001966:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f5      	bhi.n	8001958 <output_measurements+0xb4>
	}
	UART_print("\n");
 800196c:	4855      	ldr	r0, [pc, #340]	@ (8001ac4 <output_measurements+0x220>)
 800196e:	f7ff fbab 	bl	80010c8 <UART_print>
	UART_print("\x1B[3;0H");
 8001972:	4855      	ldr	r0, [pc, #340]	@ (8001ac8 <output_measurements+0x224>)
 8001974:	f7ff fba8 	bl	80010c8 <UART_print>

	//print Peak-to-Peak voltage bar
	UART_print("Vpp  ");
 8001978:	4854      	ldr	r0, [pc, #336]	@ (8001acc <output_measurements+0x228>)
 800197a:	f7ff fba5 	bl	80010c8 <UART_print>
	UART_print("#");
 800197e:	4850      	ldr	r0, [pc, #320]	@ (8001ac0 <output_measurements+0x21c>)
 8001980:	f7ff fba2 	bl	80010c8 <UART_print>
	bar_idx = 100;
 8001984:	2364      	movs	r3, #100	@ 0x64
 8001986:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(pp_volt > bar_idx){
 8001988:	e005      	b.n	8001996 <output_measurements+0xf2>
	  UART_print("#");
 800198a:	484d      	ldr	r0, [pc, #308]	@ (8001ac0 <output_measurements+0x21c>)
 800198c:	f7ff fb9c 	bl	80010c8 <UART_print>
	  bar_idx += 100;
 8001990:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001992:	3364      	adds	r3, #100	@ 0x64
 8001994:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(pp_volt > bar_idx){
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800199a:	429a      	cmp	r2, r3
 800199c:	d8f5      	bhi.n	800198a <output_measurements+0xe6>
	}
	UART_print("\n");
 800199e:	4849      	ldr	r0, [pc, #292]	@ (8001ac4 <output_measurements+0x220>)
 80019a0:	f7ff fb92 	bl	80010c8 <UART_print>
	UART_print("\x1B[4;0H");
 80019a4:	484a      	ldr	r0, [pc, #296]	@ (8001ad0 <output_measurements+0x22c>)
 80019a6:	f7ff fb8f 	bl	80010c8 <UART_print>

	//print RMS voltage bar
	UART_print("Vrms ");
 80019aa:	484a      	ldr	r0, [pc, #296]	@ (8001ad4 <output_measurements+0x230>)
 80019ac:	f7ff fb8c 	bl	80010c8 <UART_print>
	UART_print("#");
 80019b0:	4843      	ldr	r0, [pc, #268]	@ (8001ac0 <output_measurements+0x21c>)
 80019b2:	f7ff fb89 	bl	80010c8 <UART_print>
	bar_idx = 100;
 80019b6:	2364      	movs	r3, #100	@ 0x64
 80019b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(rms_volt > bar_idx){
 80019ba:	e005      	b.n	80019c8 <output_measurements+0x124>
	  UART_print("#");
 80019bc:	4840      	ldr	r0, [pc, #256]	@ (8001ac0 <output_measurements+0x21c>)
 80019be:	f7ff fb83 	bl	80010c8 <UART_print>
	  bar_idx += 100;
 80019c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019c4:	3364      	adds	r3, #100	@ 0x64
 80019c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(rms_volt > bar_idx){
 80019c8:	883a      	ldrh	r2, [r7, #0]
 80019ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f5      	bhi.n	80019bc <output_measurements+0x118>
	}
	UART_print("\n");
 80019d0:	483c      	ldr	r0, [pc, #240]	@ (8001ac4 <output_measurements+0x220>)
 80019d2:	f7ff fb79 	bl	80010c8 <UART_print>
	UART_print("\x1B[5;6H");
 80019d6:	4840      	ldr	r0, [pc, #256]	@ (8001ad8 <output_measurements+0x234>)
 80019d8:	f7ff fb76 	bl	80010c8 <UART_print>

	//print horizontal bar axis
	UART_print("|");
 80019dc:	483f      	ldr	r0, [pc, #252]	@ (8001adc <output_measurements+0x238>)
 80019de:	f7ff fb73 	bl	80010c8 <UART_print>
	for(int i = 0; i<6; i++){
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
 80019e6:	e005      	b.n	80019f4 <output_measurements+0x150>
	  UART_print("----|");
 80019e8:	483d      	ldr	r0, [pc, #244]	@ (8001ae0 <output_measurements+0x23c>)
 80019ea:	f7ff fb6d 	bl	80010c8 <UART_print>
	for(int i = 0; i<6; i++){
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	3301      	adds	r3, #1
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	ddf6      	ble.n	80019e8 <output_measurements+0x144>
	}
	UART_print("\n");
 80019fa:	4832      	ldr	r0, [pc, #200]	@ (8001ac4 <output_measurements+0x220>)
 80019fc:	f7ff fb64 	bl	80010c8 <UART_print>
	UART_print("\x1B[6;0H");
 8001a00:	4838      	ldr	r0, [pc, #224]	@ (8001ae4 <output_measurements+0x240>)
 8001a02:	f7ff fb61 	bl	80010c8 <UART_print>

	//print horizontal axis values
	uint8_t first_dig = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	77fb      	strb	r3, [r7, #31]
	uint8_t second_dig = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	77bb      	strb	r3, [r7, #30]
	UART_print("\x1B[4C");
 8001a0e:	4836      	ldr	r0, [pc, #216]	@ (8001ae8 <output_measurements+0x244>)
 8001a10:	f7ff fb5a 	bl	80010c8 <UART_print>
	for(int i = 0; i<7; i++){
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	e031      	b.n	8001a7e <output_measurements+0x1da>
	  //set digit values
	  if(i%2 == 0){
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d108      	bne.n	8001a36 <output_measurements+0x192>
		  if(i!=0){
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <output_measurements+0x18c>
			  first_dig++;
 8001a2a:	7ffb      	ldrb	r3, [r7, #31]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	77fb      	strb	r3, [r7, #31]
		  }
		  second_dig = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	77bb      	strb	r3, [r7, #30]
 8001a34:	e001      	b.n	8001a3a <output_measurements+0x196>
	  }
	  else{
		  second_dig = 5;
 8001a36:	2305      	movs	r3, #5
 8001a38:	77bb      	strb	r3, [r7, #30]
	  }

	  //format
	  char dig1[2] = {'0' + first_dig, '\0'};
 8001a3a:	7ffb      	ldrb	r3, [r7, #31]
 8001a3c:	3330      	adds	r3, #48	@ 0x30
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	733b      	strb	r3, [r7, #12]
 8001a42:	2300      	movs	r3, #0
 8001a44:	737b      	strb	r3, [r7, #13]
	  char dig2[2] = {'0' + second_dig, '\0'};
 8001a46:	7fbb      	ldrb	r3, [r7, #30]
 8001a48:	3330      	adds	r3, #48	@ 0x30
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	723b      	strb	r3, [r7, #8]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	727b      	strb	r3, [r7, #9]
	  UART_print(dig1);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fb36 	bl	80010c8 <UART_print>
	  UART_print(".");
 8001a5c:	4823      	ldr	r0, [pc, #140]	@ (8001aec <output_measurements+0x248>)
 8001a5e:	f7ff fb33 	bl	80010c8 <UART_print>
	  UART_print(dig2);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fb2e 	bl	80010c8 <UART_print>
	  if(i!=6){
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d002      	beq.n	8001a78 <output_measurements+0x1d4>
		  UART_print("\x1B[2C");
 8001a72:	481f      	ldr	r0, [pc, #124]	@ (8001af0 <output_measurements+0x24c>)
 8001a74:	f7ff fb28 	bl	80010c8 <UART_print>
	for(int i = 0; i<7; i++){
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b06      	cmp	r3, #6
 8001a82:	ddca      	ble.n	8001a1a <output_measurements+0x176>
	  }
	}
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	372c      	adds	r7, #44	@ 0x2c
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08004a4c 	.word	0x08004a4c
 8001a94:	08004a40 	.word	0x08004a40
 8001a98:	08004a48 	.word	0x08004a48
 8001a9c:	08004a50 	.word	0x08004a50
 8001aa0:	08004a5c 	.word	0x08004a5c
 8001aa4:	08004a60 	.word	0x08004a60
 8001aa8:	08004a68 	.word	0x08004a68
 8001aac:	08004a6c 	.word	0x08004a6c
 8001ab0:	08004a74 	.word	0x08004a74
 8001ab4:	08004a7c 	.word	0x08004a7c
 8001ab8:	08004a84 	.word	0x08004a84
 8001abc:	08004a8c 	.word	0x08004a8c
 8001ac0:	08004a94 	.word	0x08004a94
 8001ac4:	08004a98 	.word	0x08004a98
 8001ac8:	08004a9c 	.word	0x08004a9c
 8001acc:	08004aa4 	.word	0x08004aa4
 8001ad0:	08004aac 	.word	0x08004aac
 8001ad4:	08004ab4 	.word	0x08004ab4
 8001ad8:	08004abc 	.word	0x08004abc
 8001adc:	08004ac4 	.word	0x08004ac4
 8001ae0:	08004ac8 	.word	0x08004ac8
 8001ae4:	08004ad0 	.word	0x08004ad0
 8001ae8:	08004ad8 	.word	0x08004ad8
 8001aec:	08004ae0 	.word	0x08004ae0
 8001af0:	08004ae4 	.word	0x08004ae4

08001af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b096      	sub	sp, #88	@ 0x58
 8001af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	2244      	movs	r2, #68	@ 0x44
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 f9e8 	bl	8003ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b1a:	f000 fabf 	bl	800209c <HAL_PWREx_ControlVoltageScaling>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b24:	f000 f82c 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001b34:	2390      	movs	r3, #144	@ 0x90
 8001b36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fb01 	bl	8002148 <HAL_RCC_OscConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001b4c:	f000 f818 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b50:	230f      	movs	r3, #15
 8001b52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	2101      	movs	r1, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fec9 	bl	8002900 <HAL_RCC_ClockConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001b74:	f000 f804 	bl	8001b80 <Error_Handler>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3758      	adds	r7, #88	@ 0x58
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <Error_Handler+0x8>

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <HAL_MspInit+0x44>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b96:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd0 <HAL_MspInit+0x44>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <HAL_MspInit+0x44>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <HAL_MspInit+0x44>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	4a08      	ldr	r2, [pc, #32]	@ (8001bd0 <HAL_MspInit+0x44>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_MspInit+0x44>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <NMI_Handler+0x4>

08001bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2a:	f000 f923 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	@ (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f002 f940 	bl	8003ee8 <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20018000 	.word	0x20018000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	200050ac 	.word	0x200050ac
 8001c9c:	20005200 	.word	0x20005200

08001ca0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <SystemInit+0x20>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <SystemInit+0x20>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	@ (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <TIM2_init>:
 *      Author: firaz
 */
#include "main.h"
#include "timer.h"

void TIM2_init(void){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	//configure TIM2 clock
	RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN);
 8001d04:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <TIM2_init+0x74>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	4a1a      	ldr	r2, [pc, #104]	@ (8001d74 <TIM2_init+0x74>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6593      	str	r3, [r2, #88]	@ 0x58
	//set TIM2 to count up
	TIM2->CR1 &= ~(TIM_CR1_DIR);
 8001d10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d1a:	f023 0310 	bic.w	r3, r3, #16
 8001d1e:	6013      	str	r3, [r2, #0]
	//set ARR clock
	TIM2->ARR = AC_SAMPLE_VAL;
 8001d20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d24:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001d28:	62da      	str	r2, [r3, #44]	@ 0x2c
	//set CCR1 to interrupt @ a 25% duty cycle
	TIM2->CCR1 = DC_SAMPLE_VAL;
 8001d2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d2e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001d32:	635a      	str	r2, [r3, #52]	@ 0x34
	//enable update event interrupt in TIM2
	TIM2->DIER |= (TIM_DIER_UIE | TIM_DIER_CC1IE);
 8001d34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d3e:	f043 0303 	orr.w	r3, r3, #3
 8001d42:	60d3      	str	r3, [r2, #12]
	//clear the flag before starting
	TIM2->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8001d44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d4e:	f023 0303 	bic.w	r3, r3, #3
 8001d52:	6113      	str	r3, [r2, #16]
	//start timer
	TIM2->CR1 |= TIM_CR1_CEN;
 8001d54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6013      	str	r3, [r2, #0]
	//enable TIM2 in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8001d64:	201c      	movs	r0, #28
 8001d66:	f7ff ffad 	bl	8001cc4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d6a:	b662      	cpsie	i
}
 8001d6c:	bf00      	nop
	//enable interrupts globally
	__enable_irq();
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000

08001d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d7c:	f7ff ff90 	bl	8001ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d80:	480c      	ldr	r0, [pc, #48]	@ (8001db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d82:	490d      	ldr	r1, [pc, #52]	@ (8001db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d84:	4a0d      	ldr	r2, [pc, #52]	@ (8001dbc <LoopForever+0xe>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d98:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc4 <LoopForever+0x16>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da6:	f002 f8a5 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001daa:	f7ff fa2d 	bl	8001208 <main>

08001dae <LoopForever>:

LoopForever:
    b LoopForever
 8001dae:	e7fe      	b.n	8001dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001db0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001dbc:	08017fc8 	.word	0x08017fc8
  ldr r2, =_sbss
 8001dc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001dc4:	200051fc 	.word	0x200051fc

08001dc8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC3_IRQHandler>

08001dca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f91f 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dda:	200f      	movs	r0, #15
 8001ddc:	f000 f80e 	bl	8001dfc <HAL_InitTick>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	71fb      	strb	r3, [r7, #7]
 8001dea:	e001      	b.n	8001df0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dec:	f7ff fece 	bl	8001b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df0:	79fb      	ldrb	r3, [r7, #7]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <HAL_InitTick+0x6c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d023      	beq.n	8001e58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e10:	4b16      	ldr	r3, [pc, #88]	@ (8001e6c <HAL_InitTick+0x70>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <HAL_InitTick+0x6c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f91d 	bl	8002066 <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10f      	bne.n	8001e52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d809      	bhi.n	8001e4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f000 f8f5 	bl	800202e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e44:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <HAL_InitTick+0x74>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e007      	b.n	8001e5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e004      	b.n	8001e5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e001      	b.n	8001e5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e78:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_IncTick+0x20>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_IncTick+0x24>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <HAL_IncTick+0x24>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008
 8001e98:	200050b0 	.word	0x200050b0

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	@ (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200050b0 	.word	0x200050b0

08001eb4 <__NVIC_SetPriorityGrouping>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff47 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff5c 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffb0 	bl	8001fd4 <SysTick_Config>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <HAL_PWREx_GetVoltageRange+0x18>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40007000 	.word	0x40007000

0800209c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020aa:	d130      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ac:	4b23      	ldr	r3, [pc, #140]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020b8:	d038      	beq.n	800212c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ba:	4b20      	ldr	r3, [pc, #128]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020c2:	4a1e      	ldr	r2, [pc, #120]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2232      	movs	r2, #50	@ 0x32
 80020d0:	fb02 f303 	mul.w	r3, r2, r3
 80020d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0c9b      	lsrs	r3, r3, #18
 80020dc:	3301      	adds	r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e0:	e002      	b.n	80020e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e8:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f4:	d102      	bne.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f2      	bne.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020fc:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002108:	d110      	bne.n	800212c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e00f      	b.n	800212e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800210e:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800211a:	d007      	beq.n	800212c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800211c:	4b07      	ldr	r3, [pc, #28]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002124:	4a05      	ldr	r2, [pc, #20]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000
 8002140:	20000000 	.word	0x20000000
 8002144:	431bde83 	.word	0x431bde83

08002148 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e3ca      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215a:	4b97      	ldr	r3, [pc, #604]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002164:	4b94      	ldr	r3, [pc, #592]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80e4 	beq.w	8002344 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <HAL_RCC_OscConfig+0x4a>
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	f040 808b 	bne.w	80022a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b01      	cmp	r3, #1
 800218e:	f040 8087 	bne.w	80022a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002192:	4b89      	ldr	r3, [pc, #548]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_RCC_OscConfig+0x62>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e3a2      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1a      	ldr	r2, [r3, #32]
 80021ae:	4b82      	ldr	r3, [pc, #520]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <HAL_RCC_OscConfig+0x7c>
 80021ba:	4b7f      	ldr	r3, [pc, #508]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c2:	e005      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
 80021c4:	4b7c      	ldr	r3, [pc, #496]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80021c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d223      	bcs.n	800221c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fd1d 	bl	8002c18 <RCC_SetFlashLatencyFromMSIRange>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e383      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e8:	4b73      	ldr	r3, [pc, #460]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a72      	ldr	r2, [pc, #456]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b70      	ldr	r3, [pc, #448]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	496d      	ldr	r1, [pc, #436]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002206:	4b6c      	ldr	r3, [pc, #432]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	4968      	ldr	r1, [pc, #416]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
 800221a:	e025      	b.n	8002268 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800221c:	4b66      	ldr	r3, [pc, #408]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a65      	ldr	r2, [pc, #404]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002222:	f043 0308 	orr.w	r3, r3, #8
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b63      	ldr	r3, [pc, #396]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4960      	ldr	r1, [pc, #384]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800223a:	4b5f      	ldr	r3, [pc, #380]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	495b      	ldr	r1, [pc, #364]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fcdd 	bl	8002c18 <RCC_SetFlashLatencyFromMSIRange>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e343      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002268:	f000 fc4a 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b52      	ldr	r3, [pc, #328]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	4950      	ldr	r1, [pc, #320]	@ (80023bc <HAL_RCC_OscConfig+0x274>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	4a4e      	ldr	r2, [pc, #312]	@ (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002286:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002288:	4b4e      	ldr	r3, [pc, #312]	@ (80023c4 <HAL_RCC_OscConfig+0x27c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fdb5 	bl	8001dfc <HAL_InitTick>
 8002292:	4603      	mov	r3, r0
 8002294:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d052      	beq.n	8002342 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	e327      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d032      	beq.n	800230e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022a8:	4b43      	ldr	r3, [pc, #268]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a42      	ldr	r2, [pc, #264]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fdf2 	bl	8001e9c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022bc:	f7ff fdee 	bl	8001e9c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e310      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ce:	4b3a      	ldr	r3, [pc, #232]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022da:	4b37      	ldr	r3, [pc, #220]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a36      	ldr	r2, [pc, #216]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022e0:	f043 0308 	orr.w	r3, r3, #8
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b34      	ldr	r3, [pc, #208]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4931      	ldr	r1, [pc, #196]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f8:	4b2f      	ldr	r3, [pc, #188]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	492c      	ldr	r1, [pc, #176]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
 800230c:	e01a      	b.n	8002344 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800230e:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a29      	ldr	r2, [pc, #164]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800231a:	f7ff fdbf 	bl	8001e9c <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002322:	f7ff fdbb 	bl	8001e9c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e2dd      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002334:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x1da>
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002342:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d074      	beq.n	800243a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b08      	cmp	r3, #8
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x21a>
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d10e      	bne.n	800237a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d10b      	bne.n	800237a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d064      	beq.n	8002438 <HAL_RCC_OscConfig+0x2f0>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d160      	bne.n	8002438 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e2ba      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x24a>
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0b      	ldr	r2, [pc, #44]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	e026      	b.n	80023e0 <HAL_RCC_OscConfig+0x298>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800239a:	d115      	bne.n	80023c8 <HAL_RCC_OscConfig+0x280>
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a05      	ldr	r2, [pc, #20]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80023a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a02      	ldr	r2, [pc, #8]	@ (80023b8 <HAL_RCC_OscConfig+0x270>)
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e014      	b.n	80023e0 <HAL_RCC_OscConfig+0x298>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08004aec 	.word	0x08004aec
 80023c0:	20000000 	.word	0x20000000
 80023c4:	20000004 	.word	0x20000004
 80023c8:	4ba0      	ldr	r3, [pc, #640]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a9f      	ldr	r2, [pc, #636]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4b9d      	ldr	r3, [pc, #628]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a9c      	ldr	r2, [pc, #624]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff fd58 	bl	8001e9c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7ff fd54 	bl	8001e9c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	@ 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e276      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002402:	4b92      	ldr	r3, [pc, #584]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x2a8>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7ff fd44 	bl	8001e9c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff fd40 	bl	8001e9c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	@ 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e262      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800242a:	4b88      	ldr	r3, [pc, #544]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x2d0>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d060      	beq.n	8002508 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d005      	beq.n	8002458 <HAL_RCC_OscConfig+0x310>
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d119      	bne.n	8002486 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d116      	bne.n	8002486 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002458:	4b7c      	ldr	r3, [pc, #496]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_OscConfig+0x328>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e23f      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	4b76      	ldr	r3, [pc, #472]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	061b      	lsls	r3, r3, #24
 800247e:	4973      	ldr	r1, [pc, #460]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002484:	e040      	b.n	8002508 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d023      	beq.n	80024d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248e:	4b6f      	ldr	r3, [pc, #444]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6e      	ldr	r2, [pc, #440]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7ff fcff 	bl	8001e9c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff fcfb 	bl	8001e9c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e21d      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b4:	4b65      	ldr	r3, [pc, #404]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b62      	ldr	r3, [pc, #392]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	495f      	ldr	r1, [pc, #380]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
 80024d4:	e018      	b.n	8002508 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b5d      	ldr	r3, [pc, #372]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a5c      	ldr	r2, [pc, #368]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80024dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7ff fcdb 	bl	8001e9c <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ea:	f7ff fcd7 	bl	8001e9c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1f9      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024fc:	4b53      	ldr	r3, [pc, #332]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d03c      	beq.n	800258e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01c      	beq.n	8002556 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251c:	4b4b      	ldr	r3, [pc, #300]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002522:	4a4a      	ldr	r2, [pc, #296]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7ff fcb6 	bl	8001e9c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7ff fcb2 	bl	8001e9c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1d4      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002546:	4b41      	ldr	r3, [pc, #260]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ef      	beq.n	8002534 <HAL_RCC_OscConfig+0x3ec>
 8002554:	e01b      	b.n	800258e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002556:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800255c:	4a3b      	ldr	r2, [pc, #236]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7ff fc99 	bl	8001e9c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256e:	f7ff fc95 	bl	8001e9c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1b7      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002580:	4b32      	ldr	r3, [pc, #200]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ef      	bne.n	800256e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80a6 	beq.w	80026e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025a0:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10d      	bne.n	80025c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ac:	4b27      	ldr	r3, [pc, #156]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	4a26      	ldr	r2, [pc, #152]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80025b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025b8:	4b24      	ldr	r3, [pc, #144]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c8:	4b21      	ldr	r3, [pc, #132]	@ (8002650 <HAL_RCC_OscConfig+0x508>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d118      	bne.n	8002606 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <HAL_RCC_OscConfig+0x508>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002650 <HAL_RCC_OscConfig+0x508>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e0:	f7ff fc5c 	bl	8001e9c <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e8:	f7ff fc58 	bl	8001e9c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e17a      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <HAL_RCC_OscConfig+0x508>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d108      	bne.n	8002620 <HAL_RCC_OscConfig+0x4d8>
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002614:	4a0d      	ldr	r2, [pc, #52]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800261e:	e029      	b.n	8002674 <HAL_RCC_OscConfig+0x52c>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b05      	cmp	r3, #5
 8002626:	d115      	bne.n	8002654 <HAL_RCC_OscConfig+0x50c>
 8002628:	4b08      	ldr	r3, [pc, #32]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	4a07      	ldr	r2, [pc, #28]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	4a03      	ldr	r2, [pc, #12]	@ (800264c <HAL_RCC_OscConfig+0x504>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002648:	e014      	b.n	8002674 <HAL_RCC_OscConfig+0x52c>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
 8002654:	4b9c      	ldr	r3, [pc, #624]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265a:	4a9b      	ldr	r2, [pc, #620]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002664:	4b98      	ldr	r3, [pc, #608]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266a:	4a97      	ldr	r2, [pc, #604]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d016      	beq.n	80026aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff fc0e 	bl	8001e9c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002682:	e00a      	b.n	800269a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7ff fc0a 	bl	8001e9c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e12a      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269a:	4b8b      	ldr	r3, [pc, #556]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ed      	beq.n	8002684 <HAL_RCC_OscConfig+0x53c>
 80026a8:	e015      	b.n	80026d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7ff fbf7 	bl	8001e9c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7ff fbf3 	bl	8001e9c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e113      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c8:	4b7f      	ldr	r3, [pc, #508]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ed      	bne.n	80026b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d6:	7ffb      	ldrb	r3, [r7, #31]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026dc:	4b7a      	ldr	r3, [pc, #488]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	4a79      	ldr	r2, [pc, #484]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80fe 	beq.w	80028ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	f040 80d0 	bne.w	800289c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026fc:	4b72      	ldr	r3, [pc, #456]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	429a      	cmp	r2, r3
 800270e:	d130      	bne.n	8002772 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	3b01      	subs	r3, #1
 800271c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d127      	bne.n	8002772 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d11f      	bne.n	8002772 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800273c:	2a07      	cmp	r2, #7
 800273e:	bf14      	ite	ne
 8002740:	2201      	movne	r2, #1
 8002742:	2200      	moveq	r2, #0
 8002744:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002746:	4293      	cmp	r3, r2
 8002748:	d113      	bne.n	8002772 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	3b01      	subs	r3, #1
 8002758:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d109      	bne.n	8002772 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	3b01      	subs	r3, #1
 800276c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d06e      	beq.n	8002850 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	d069      	beq.n	800284c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002778:	4b53      	ldr	r3, [pc, #332]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002784:	4b50      	ldr	r3, [pc, #320]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0ad      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002794:	4b4c      	ldr	r3, [pc, #304]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4b      	ldr	r2, [pc, #300]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800279a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800279e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a0:	f7ff fb7c 	bl	8001e9c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7ff fb78 	bl	8001e9c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e09a      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ba:	4b43      	ldr	r3, [pc, #268]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c6:	4b40      	ldr	r3, [pc, #256]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	4b40      	ldr	r3, [pc, #256]	@ (80028cc <HAL_RCC_OscConfig+0x784>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027d6:	3a01      	subs	r2, #1
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	4311      	orrs	r1, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027e0:	0212      	lsls	r2, r2, #8
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027e8:	0852      	lsrs	r2, r2, #1
 80027ea:	3a01      	subs	r2, #1
 80027ec:	0552      	lsls	r2, r2, #21
 80027ee:	4311      	orrs	r1, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027f4:	0852      	lsrs	r2, r2, #1
 80027f6:	3a01      	subs	r2, #1
 80027f8:	0652      	lsls	r2, r2, #25
 80027fa:	4311      	orrs	r1, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002800:	0912      	lsrs	r2, r2, #4
 8002802:	0452      	lsls	r2, r2, #17
 8002804:	430a      	orrs	r2, r1
 8002806:	4930      	ldr	r1, [pc, #192]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002808:	4313      	orrs	r3, r2
 800280a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800280c:	4b2e      	ldr	r3, [pc, #184]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a2d      	ldr	r2, [pc, #180]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002816:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002818:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a2a      	ldr	r2, [pc, #168]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002822:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002824:	f7ff fb3a 	bl	8001e9c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7ff fb36 	bl	8001e9c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e058      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283e:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800284a:	e050      	b.n	80028ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e04f      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002850:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d148      	bne.n	80028ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800285c:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a19      	ldr	r2, [pc, #100]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002866:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002868:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a16      	ldr	r2, [pc, #88]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002872:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002874:	f7ff fb12 	bl	8001e9c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7ff fb0e 	bl	8001e9c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e030      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288e:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x734>
 800289a:	e028      	b.n	80028ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d023      	beq.n	80028ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a2:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a08      	ldr	r2, [pc, #32]	@ (80028c8 <HAL_RCC_OscConfig+0x780>)
 80028a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7ff faf5 	bl	8001e9c <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b4:	e00c      	b.n	80028d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7ff faf1 	bl	8001e9c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d905      	bls.n	80028d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e013      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
 80028c8:	40021000 	.word	0x40021000
 80028cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d0:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <HAL_RCC_OscConfig+0x7b0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ec      	bne.n	80028b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028dc:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_OscConfig+0x7b0>)
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	4905      	ldr	r1, [pc, #20]	@ (80028f8 <HAL_RCC_OscConfig+0x7b0>)
 80028e2:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_RCC_OscConfig+0x7b4>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
 80028e8:	e001      	b.n	80028ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000
 80028fc:	feeefffc 	.word	0xfeeefffc

08002900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0e7      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b75      	ldr	r3, [pc, #468]	@ (8002aec <HAL_RCC_ClockConfig+0x1ec>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d910      	bls.n	8002944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b72      	ldr	r3, [pc, #456]	@ (8002aec <HAL_RCC_ClockConfig+0x1ec>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	4970      	ldr	r1, [pc, #448]	@ (8002aec <HAL_RCC_ClockConfig+0x1ec>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b6e      	ldr	r3, [pc, #440]	@ (8002aec <HAL_RCC_ClockConfig+0x1ec>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0cf      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	4b66      	ldr	r3, [pc, #408]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800295c:	429a      	cmp	r2, r3
 800295e:	d908      	bls.n	8002972 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b63      	ldr	r3, [pc, #396]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4960      	ldr	r1, [pc, #384]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d04c      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002986:	4b5a      	ldr	r3, [pc, #360]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d121      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0a6      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800299e:	4b54      	ldr	r3, [pc, #336]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d115      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e09a      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b6:	4b4e      	ldr	r3, [pc, #312]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e08e      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c6:	4b4a      	ldr	r3, [pc, #296]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e086      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029d6:	4b46      	ldr	r3, [pc, #280]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4943      	ldr	r1, [pc, #268]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e8:	f7ff fa58 	bl	8001e9c <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7ff fa54 	bl	8001e9c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e06e      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b3a      	ldr	r3, [pc, #232]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 020c 	and.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1eb      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4b31      	ldr	r3, [pc, #196]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d208      	bcs.n	8002a46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b2e      	ldr	r3, [pc, #184]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	492b      	ldr	r1, [pc, #172]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a46:	4b29      	ldr	r3, [pc, #164]	@ (8002aec <HAL_RCC_ClockConfig+0x1ec>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d210      	bcs.n	8002a76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a54:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <HAL_RCC_ClockConfig+0x1ec>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 0207 	bic.w	r2, r3, #7
 8002a5c:	4923      	ldr	r1, [pc, #140]	@ (8002aec <HAL_RCC_ClockConfig+0x1ec>)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a64:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <HAL_RCC_ClockConfig+0x1ec>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e036      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a82:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4918      	ldr	r1, [pc, #96]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d009      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa0:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4910      	ldr	r1, [pc, #64]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ab4:	f000 f824 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	490b      	ldr	r1, [pc, #44]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f4>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad0:	4a09      	ldr	r2, [pc, #36]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ad4:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <HAL_RCC_ClockConfig+0x1fc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f98f 	bl	8001dfc <HAL_InitTick>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08004aec 	.word	0x08004aec
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	@ 0x24
 8002b04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b18:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x34>
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d121      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d11e      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b34:	4b34      	ldr	r3, [pc, #208]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b40:	4b31      	ldr	r3, [pc, #196]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	e005      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b50:	4b2d      	ldr	r3, [pc, #180]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d102      	bne.n	8002b7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b78:	4b25      	ldr	r3, [pc, #148]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	e004      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b84:	4b23      	ldr	r3, [pc, #140]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d134      	bne.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d003      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0xac>
 8002ba4:	e005      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ba8:	617b      	str	r3, [r7, #20]
      break;
 8002baa:	e005      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bac:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bae:	617b      	str	r3, [r7, #20]
      break;
 8002bb0:	e002      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	617b      	str	r3, [r7, #20]
      break;
 8002bb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb8:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	fb03 f202 	mul.w	r2, r3, r2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	0e5b      	lsrs	r3, r3, #25
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	3301      	adds	r3, #1
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	@ 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08004afc 	.word	0x08004afc
 8002c10:	00f42400 	.word	0x00f42400
 8002c14:	007a1200 	.word	0x007a1200

08002c18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c24:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c30:	f7ff fa26 	bl	8002080 <HAL_PWREx_GetVoltageRange>
 8002c34:	6178      	str	r0, [r7, #20]
 8002c36:	e014      	b.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c38:	4b25      	ldr	r3, [pc, #148]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	4a24      	ldr	r2, [pc, #144]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c44:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c50:	f7ff fa16 	bl	8002080 <HAL_PWREx_GetVoltageRange>
 8002c54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c68:	d10b      	bne.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b80      	cmp	r3, #128	@ 0x80
 8002c6e:	d919      	bls.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c74:	d902      	bls.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c76:	2302      	movs	r3, #2
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e013      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e010      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b80      	cmp	r3, #128	@ 0x80
 8002c86:	d902      	bls.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c88:	2303      	movs	r3, #3
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	e00a      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b80      	cmp	r3, #128	@ 0x80
 8002c92:	d102      	bne.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c94:	2302      	movs	r3, #2
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	e004      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b70      	cmp	r3, #112	@ 0x70
 8002c9e:	d101      	bne.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 0207 	bic.w	r2, r3, #7
 8002cac:	4909      	ldr	r1, [pc, #36]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb4:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d001      	beq.n	8002cc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40022000 	.word	0x40022000

08002cd8 <arm_rfft_fast_init_f32>:
 8002cd8:	084b      	lsrs	r3, r1, #1
 8002cda:	2b80      	cmp	r3, #128	@ 0x80
 8002cdc:	b430      	push	{r4, r5}
 8002cde:	8201      	strh	r1, [r0, #16]
 8002ce0:	8003      	strh	r3, [r0, #0]
 8002ce2:	d06f      	beq.n	8002dc4 <arm_rfft_fast_init_f32+0xec>
 8002ce4:	d916      	bls.n	8002d14 <arm_rfft_fast_init_f32+0x3c>
 8002ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cea:	d05e      	beq.n	8002daa <arm_rfft_fast_init_f32+0xd2>
 8002cec:	d935      	bls.n	8002d5a <arm_rfft_fast_init_f32+0x82>
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf2:	d025      	beq.n	8002d40 <arm_rfft_fast_init_f32+0x68>
 8002cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cf8:	d112      	bne.n	8002d20 <arm_rfft_fast_init_f32+0x48>
 8002cfa:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 8002cfe:	4c37      	ldr	r4, [pc, #220]	@ (8002ddc <arm_rfft_fast_init_f32+0x104>)
 8002d00:	4937      	ldr	r1, [pc, #220]	@ (8002de0 <arm_rfft_fast_init_f32+0x108>)
 8002d02:	2300      	movs	r3, #0
 8002d04:	4a37      	ldr	r2, [pc, #220]	@ (8002de4 <arm_rfft_fast_init_f32+0x10c>)
 8002d06:	8185      	strh	r5, [r0, #12]
 8002d08:	6084      	str	r4, [r0, #8]
 8002d0a:	6041      	str	r1, [r0, #4]
 8002d0c:	6142      	str	r2, [r0, #20]
 8002d0e:	b258      	sxtb	r0, r3
 8002d10:	bc30      	pop	{r4, r5}
 8002d12:	4770      	bx	lr
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d030      	beq.n	8002d7a <arm_rfft_fast_init_f32+0xa2>
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d005      	beq.n	8002d28 <arm_rfft_fast_init_f32+0x50>
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d038      	beq.n	8002d92 <arm_rfft_fast_init_f32+0xba>
 8002d20:	23ff      	movs	r3, #255	@ 0xff
 8002d22:	bc30      	pop	{r4, r5}
 8002d24:	b258      	sxtb	r0, r3
 8002d26:	4770      	bx	lr
 8002d28:	2538      	movs	r5, #56	@ 0x38
 8002d2a:	4c2f      	ldr	r4, [pc, #188]	@ (8002de8 <arm_rfft_fast_init_f32+0x110>)
 8002d2c:	492f      	ldr	r1, [pc, #188]	@ (8002dec <arm_rfft_fast_init_f32+0x114>)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	4a2f      	ldr	r2, [pc, #188]	@ (8002df0 <arm_rfft_fast_init_f32+0x118>)
 8002d32:	8185      	strh	r5, [r0, #12]
 8002d34:	6084      	str	r4, [r0, #8]
 8002d36:	6041      	str	r1, [r0, #4]
 8002d38:	6142      	str	r2, [r0, #20]
 8002d3a:	b258      	sxtb	r0, r3
 8002d3c:	bc30      	pop	{r4, r5}
 8002d3e:	4770      	bx	lr
 8002d40:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8002d44:	4c2b      	ldr	r4, [pc, #172]	@ (8002df4 <arm_rfft_fast_init_f32+0x11c>)
 8002d46:	492c      	ldr	r1, [pc, #176]	@ (8002df8 <arm_rfft_fast_init_f32+0x120>)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002dfc <arm_rfft_fast_init_f32+0x124>)
 8002d4c:	8185      	strh	r5, [r0, #12]
 8002d4e:	6084      	str	r4, [r0, #8]
 8002d50:	6041      	str	r1, [r0, #4]
 8002d52:	6142      	str	r2, [r0, #20]
 8002d54:	b258      	sxtb	r0, r3
 8002d56:	bc30      	pop	{r4, r5}
 8002d58:	4770      	bx	lr
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d5e:	d1df      	bne.n	8002d20 <arm_rfft_fast_init_f32+0x48>
 8002d60:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8002d64:	4c26      	ldr	r4, [pc, #152]	@ (8002e00 <arm_rfft_fast_init_f32+0x128>)
 8002d66:	4927      	ldr	r1, [pc, #156]	@ (8002e04 <arm_rfft_fast_init_f32+0x12c>)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	4a27      	ldr	r2, [pc, #156]	@ (8002e08 <arm_rfft_fast_init_f32+0x130>)
 8002d6c:	8185      	strh	r5, [r0, #12]
 8002d6e:	6084      	str	r4, [r0, #8]
 8002d70:	6041      	str	r1, [r0, #4]
 8002d72:	6142      	str	r2, [r0, #20]
 8002d74:	b258      	sxtb	r0, r3
 8002d76:	bc30      	pop	{r4, r5}
 8002d78:	4770      	bx	lr
 8002d7a:	2530      	movs	r5, #48	@ 0x30
 8002d7c:	4c23      	ldr	r4, [pc, #140]	@ (8002e0c <arm_rfft_fast_init_f32+0x134>)
 8002d7e:	4924      	ldr	r1, [pc, #144]	@ (8002e10 <arm_rfft_fast_init_f32+0x138>)
 8002d80:	2300      	movs	r3, #0
 8002d82:	4a24      	ldr	r2, [pc, #144]	@ (8002e14 <arm_rfft_fast_init_f32+0x13c>)
 8002d84:	8185      	strh	r5, [r0, #12]
 8002d86:	6084      	str	r4, [r0, #8]
 8002d88:	6041      	str	r1, [r0, #4]
 8002d8a:	6142      	str	r2, [r0, #20]
 8002d8c:	b258      	sxtb	r0, r3
 8002d8e:	bc30      	pop	{r4, r5}
 8002d90:	4770      	bx	lr
 8002d92:	2514      	movs	r5, #20
 8002d94:	4c20      	ldr	r4, [pc, #128]	@ (8002e18 <arm_rfft_fast_init_f32+0x140>)
 8002d96:	4921      	ldr	r1, [pc, #132]	@ (8002e1c <arm_rfft_fast_init_f32+0x144>)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	4a21      	ldr	r2, [pc, #132]	@ (8002e20 <arm_rfft_fast_init_f32+0x148>)
 8002d9c:	8185      	strh	r5, [r0, #12]
 8002d9e:	6084      	str	r4, [r0, #8]
 8002da0:	6041      	str	r1, [r0, #4]
 8002da2:	6142      	str	r2, [r0, #20]
 8002da4:	b258      	sxtb	r0, r3
 8002da6:	bc30      	pop	{r4, r5}
 8002da8:	4770      	bx	lr
 8002daa:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8002dae:	4c1d      	ldr	r4, [pc, #116]	@ (8002e24 <arm_rfft_fast_init_f32+0x14c>)
 8002db0:	491d      	ldr	r1, [pc, #116]	@ (8002e28 <arm_rfft_fast_init_f32+0x150>)
 8002db2:	2300      	movs	r3, #0
 8002db4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <arm_rfft_fast_init_f32+0x154>)
 8002db6:	8185      	strh	r5, [r0, #12]
 8002db8:	6084      	str	r4, [r0, #8]
 8002dba:	6041      	str	r1, [r0, #4]
 8002dbc:	6142      	str	r2, [r0, #20]
 8002dbe:	b258      	sxtb	r0, r3
 8002dc0:	bc30      	pop	{r4, r5}
 8002dc2:	4770      	bx	lr
 8002dc4:	25d0      	movs	r5, #208	@ 0xd0
 8002dc6:	4c1a      	ldr	r4, [pc, #104]	@ (8002e30 <arm_rfft_fast_init_f32+0x158>)
 8002dc8:	491a      	ldr	r1, [pc, #104]	@ (8002e34 <arm_rfft_fast_init_f32+0x15c>)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <arm_rfft_fast_init_f32+0x160>)
 8002dce:	8185      	strh	r5, [r0, #12]
 8002dd0:	6084      	str	r4, [r0, #8]
 8002dd2:	6041      	str	r1, [r0, #4]
 8002dd4:	6142      	str	r2, [r0, #20]
 8002dd6:	b258      	sxtb	r0, r3
 8002dd8:	bc30      	pop	{r4, r5}
 8002dda:	4770      	bx	lr
 8002ddc:	08013934 	.word	0x08013934
 8002de0:	08004b2c 	.word	0x08004b2c
 8002de4:	0800ac9c 	.word	0x0800ac9c
 8002de8:	08008c2c 	.word	0x08008c2c
 8002dec:	080156f4 	.word	0x080156f4
 8002df0:	08017be4 	.word	0x08017be4
 8002df4:	0801161c 	.word	0x0801161c
 8002df8:	0800f51c 	.word	0x0800f51c
 8002dfc:	08008c9c 	.word	0x08008c9c
 8002e00:	08017874 	.word	0x08017874
 8002e04:	0800ec9c 	.word	0x0800ec9c
 8002e08:	080158f4 	.word	0x080158f4
 8002e0c:	080124d4 	.word	0x080124d4
 8002e10:	0801151c 	.word	0x0801151c
 8002e14:	08008b2c 	.word	0x08008b2c
 8002e18:	0801242c 	.word	0x0801242c
 8002e1c:	0800f49c 	.word	0x0800f49c
 8002e20:	08012454 	.word	0x08012454
 8002e24:	080160f4 	.word	0x080160f4
 8002e28:	08012934 	.word	0x08012934
 8002e2c:	08016474 	.word	0x08016474
 8002e30:	08017de4 	.word	0x08017de4
 8002e34:	08012534 	.word	0x08012534
 8002e38:	08017474 	.word	0x08017474

08002e3c <arm_rfft_fast_f32>:
 8002e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e40:	8a05      	ldrh	r5, [r0, #16]
 8002e42:	4606      	mov	r6, r0
 8002e44:	4690      	mov	r8, r2
 8002e46:	460c      	mov	r4, r1
 8002e48:	086d      	lsrs	r5, r5, #1
 8002e4a:	8005      	strh	r5, [r0, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d15e      	bne.n	8002f0e <arm_rfft_fast_f32+0xd2>
 8002e50:	461a      	mov	r2, r3
 8002e52:	2301      	movs	r3, #1
 8002e54:	f000 fbe0 	bl	8003618 <arm_cfft_f32>
 8002e58:	edd4 7a00 	vldr	s15, [r4]
 8002e5c:	ed94 7a01 	vldr	s14, [r4, #4]
 8002e60:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002e64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e68:	8837      	ldrh	r7, [r6, #0]
 8002e6a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002e6e:	6975      	ldr	r5, [r6, #20]
 8002e70:	3f01      	subs	r7, #1
 8002e72:	eef0 3a46 	vmov.f32	s7, s12
 8002e76:	3510      	adds	r5, #16
 8002e78:	f108 0610 	add.w	r6, r8, #16
 8002e7c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002e80:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8002e84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e88:	f104 0310 	add.w	r3, r4, #16
 8002e8c:	3808      	subs	r0, #8
 8002e8e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8002e92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002e96:	ed88 7a00 	vstr	s14, [r8]
 8002e9a:	edc8 7a01 	vstr	s15, [r8, #4]
 8002e9e:	edd0 6a02 	vldr	s13, [r0, #8]
 8002ea2:	3f01      	subs	r7, #1
 8002ea4:	ed13 5a02 	vldr	s10, [r3, #-8]
 8002ea8:	f1a0 0008 	sub.w	r0, r0, #8
 8002eac:	ed13 7a01 	vldr	s14, [r3, #-4]
 8002eb0:	f105 0508 	add.w	r5, r5, #8
 8002eb4:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8002eb8:	ed15 6a04 	vldr	s12, [r5, #-16]
 8002ebc:	edd0 5a05 	vldr	s11, [r0, #20]
 8002ec0:	ee36 5a85 	vadd.f32	s10, s13, s10
 8002ec4:	ed55 6a03 	vldr	s13, [r5, #-12]
 8002ec8:	f103 0308 	add.w	r3, r3, #8
 8002ecc:	ee35 4a87 	vadd.f32	s8, s11, s14
 8002ed0:	f106 0608 	add.w	r6, r6, #8
 8002ed4:	ee66 4a27 	vmul.f32	s9, s12, s15
 8002ed8:	ee77 5a65 	vsub.f32	s11, s14, s11
 8002edc:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8002ee0:	ee34 5a85 	vadd.f32	s10, s9, s10
 8002ee4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002ee8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8002eec:	ee77 7a25 	vadd.f32	s15, s14, s11
 8002ef0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002ef4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002ef8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8002efc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8002f00:	ed46 6a04 	vstr	s13, [r6, #-16]
 8002f04:	ed46 7a03 	vstr	s15, [r6, #-12]
 8002f08:	d1c9      	bne.n	8002e9e <arm_rfft_fast_f32+0x62>
 8002f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f0e:	edd1 7a00 	vldr	s15, [r1]
 8002f12:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8002f16:	edd1 6a01 	vldr	s13, [r1, #4]
 8002f1a:	1e68      	subs	r0, r5, #1
 8002f1c:	6975      	ldr	r5, [r6, #20]
 8002f1e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002f22:	00c1      	lsls	r1, r0, #3
 8002f24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f28:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002f2c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8002f30:	ed82 7a00 	vstr	s14, [r2]
 8002f34:	edc2 7a01 	vstr	s15, [r2, #4]
 8002f38:	b3e0      	cbz	r0, 8002fb4 <arm_rfft_fast_f32+0x178>
 8002f3a:	3908      	subs	r1, #8
 8002f3c:	f104 0210 	add.w	r2, r4, #16
 8002f40:	3510      	adds	r5, #16
 8002f42:	440c      	add	r4, r1
 8002f44:	f108 0110 	add.w	r1, r8, #16
 8002f48:	ed94 7a02 	vldr	s14, [r4, #8]
 8002f4c:	3801      	subs	r0, #1
 8002f4e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8002f52:	f1a4 0408 	sub.w	r4, r4, #8
 8002f56:	ed15 6a02 	vldr	s12, [r5, #-8]
 8002f5a:	f102 0208 	add.w	r2, r2, #8
 8002f5e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8002f62:	ed94 4a05 	vldr	s8, [r4, #20]
 8002f66:	ed12 5a03 	vldr	s10, [r2, #-12]
 8002f6a:	ee77 6a26 	vadd.f32	s13, s14, s13
 8002f6e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8002f72:	f101 0108 	add.w	r1, r1, #8
 8002f76:	ee26 3a27 	vmul.f32	s6, s12, s15
 8002f7a:	f105 0508 	add.w	r5, r5, #8
 8002f7e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8002f82:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8002f86:	ee35 5a44 	vsub.f32	s10, s10, s8
 8002f8a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8002f8e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8002f92:	ee77 7a05 	vadd.f32	s15, s14, s10
 8002f96:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8002f9a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002f9e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8002fa2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8002fa6:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002faa:	ed41 7a03 	vstr	s15, [r1, #-12]
 8002fae:	ed01 7a04 	vstr	s14, [r1, #-16]
 8002fb2:	d1c9      	bne.n	8002f48 <arm_rfft_fast_f32+0x10c>
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	4641      	mov	r1, r8
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc0:	f000 bb2a 	b.w	8003618 <arm_cfft_f32>

08002fc4 <arm_cfft_radix8by2_f32>:
 8002fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc8:	ed2d 8b06 	vpush	{d8-d10}
 8002fcc:	f8b0 e000 	ldrh.w	lr, [r0]
 8002fd0:	4607      	mov	r7, r0
 8002fd2:	6842      	ldr	r2, [r0, #4]
 8002fd4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8002fd8:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8002fdc:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8002fe0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8002fe4:	f000 80af 	beq.w	8003146 <arm_cfft_radix8by2_f32+0x182>
 8002fe8:	3310      	adds	r3, #16
 8002fea:	3210      	adds	r2, #16
 8002fec:	f101 0610 	add.w	r6, r1, #16
 8002ff0:	f108 0510 	add.w	r5, r8, #16
 8002ff4:	18cc      	adds	r4, r1, r3
 8002ff6:	4443      	add	r3, r8
 8002ff8:	ed55 6a04 	vldr	s13, [r5, #-16]
 8002ffc:	f1be 0e01 	subs.w	lr, lr, #1
 8003000:	ed56 4a04 	vldr	s9, [r6, #-16]
 8003004:	f104 0410 	add.w	r4, r4, #16
 8003008:	ed55 7a02 	vldr	s15, [r5, #-8]
 800300c:	f106 0610 	add.w	r6, r6, #16
 8003010:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8003014:	ed53 0a04 	vldr	s1, [r3, #-16]
 8003018:	ed13 5a03 	vldr	s10, [r3, #-12]
 800301c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003020:	ed13 3a02 	vldr	s6, [r3, #-8]
 8003024:	f102 0210 	add.w	r2, r2, #16
 8003028:	ed15 7a03 	vldr	s14, [r5, #-12]
 800302c:	f103 0310 	add.w	r3, r3, #16
 8003030:	ed55 2a01 	vldr	s5, [r5, #-4]
 8003034:	f105 0510 	add.w	r5, r5, #16
 8003038:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800303c:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 8003040:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8003044:	ee33 8a83 	vadd.f32	s16, s7, s6
 8003048:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800304c:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 8003050:	ee34 0a06 	vadd.f32	s0, s8, s12
 8003054:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 8003058:	ee76 aa87 	vadd.f32	s21, s13, s14
 800305c:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 8003060:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003064:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 8003068:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800306c:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 8003070:	ee71 8a05 	vadd.f32	s17, s2, s10
 8003074:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8003078:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800307c:	ee72 9a22 	vadd.f32	s19, s4, s5
 8003080:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8003084:	ee35 5a41 	vsub.f32	s10, s10, s2
 8003088:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800308c:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 8003090:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003094:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8003098:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800309c:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 80030a0:	ee72 7a62 	vsub.f32	s15, s4, s5
 80030a4:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 80030a8:	ee73 2a63 	vsub.f32	s5, s6, s7
 80030ac:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 80030b0:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 80030b4:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 80030b8:	ee24 3a84 	vmul.f32	s6, s9, s8
 80030bc:	ee27 2a26 	vmul.f32	s4, s14, s13
 80030c0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80030c4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80030c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80030cc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80030d0:	ee65 6a26 	vmul.f32	s13, s10, s13
 80030d4:	ee25 5a04 	vmul.f32	s10, s10, s8
 80030d8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80030dc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80030e0:	ee33 4a02 	vadd.f32	s8, s6, s4
 80030e4:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80030e8:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 80030ec:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 80030f0:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 80030f4:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80030f8:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 80030fc:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8003100:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8003104:	ee27 4a87 	vmul.f32	s8, s15, s14
 8003108:	ee61 5a87 	vmul.f32	s11, s3, s14
 800310c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003110:	ee22 5a87 	vmul.f32	s10, s5, s14
 8003114:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003118:	ee26 6a26 	vmul.f32	s12, s12, s13
 800311c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8003120:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003124:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003128:	ee35 6a46 	vsub.f32	s12, s10, s12
 800312c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003130:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 8003134:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8003138:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800313c:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8003140:	f47f af5a 	bne.w	8002ff8 <arm_cfft_radix8by2_f32+0x34>
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	fa1f f48c 	uxth.w	r4, ip
 800314a:	4608      	mov	r0, r1
 800314c:	2302      	movs	r3, #2
 800314e:	4621      	mov	r1, r4
 8003150:	f000 fbc2 	bl	80038d8 <arm_radix8_butterfly_f32>
 8003154:	4640      	mov	r0, r8
 8003156:	4621      	mov	r1, r4
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	2302      	movs	r3, #2
 800315c:	ecbd 8b06 	vpop	{d8-d10}
 8003160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003164:	f000 bbb8 	b.w	80038d8 <arm_radix8_butterfly_f32>

08003168 <arm_cfft_radix8by4_f32>:
 8003168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800316c:	ed2d 8b06 	vpush	{d8-d10}
 8003170:	8804      	ldrh	r4, [r0, #0]
 8003172:	b08f      	sub	sp, #60	@ 0x3c
 8003174:	ed91 6a00 	vldr	s12, [r1]
 8003178:	460a      	mov	r2, r1
 800317a:	0864      	lsrs	r4, r4, #1
 800317c:	ed91 7a01 	vldr	s14, [r1, #4]
 8003180:	9101      	str	r1, [sp, #4]
 8003182:	00a3      	lsls	r3, r4, #2
 8003184:	9104      	str	r1, [sp, #16]
 8003186:	0864      	lsrs	r4, r4, #1
 8003188:	6841      	ldr	r1, [r0, #4]
 800318a:	900c      	str	r0, [sp, #48]	@ 0x30
 800318c:	4625      	mov	r5, r4
 800318e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003190:	f101 0408 	add.w	r4, r1, #8
 8003194:	f101 0610 	add.w	r6, r1, #16
 8003198:	9406      	str	r4, [sp, #24]
 800319a:	18d4      	adds	r4, r2, r3
 800319c:	1eaa      	subs	r2, r5, #2
 800319e:	f101 0518 	add.w	r5, r1, #24
 80031a2:	18e0      	adds	r0, r4, r3
 80031a4:	ed94 4a00 	vldr	s8, [r4]
 80031a8:	edd4 3a01 	vldr	s7, [r4, #4]
 80031ac:	46a6      	mov	lr, r4
 80031ae:	edd0 6a00 	vldr	s13, [r0]
 80031b2:	18c7      	adds	r7, r0, r3
 80031b4:	edd0 7a01 	vldr	s15, [r0, #4]
 80031b8:	46a0      	mov	r8, r4
 80031ba:	ee76 5a26 	vadd.f32	s11, s12, s13
 80031be:	edd7 4a00 	vldr	s9, [r7]
 80031c2:	9402      	str	r4, [sp, #8]
 80031c4:	4604      	mov	r4, r0
 80031c6:	9507      	str	r5, [sp, #28]
 80031c8:	4605      	mov	r5, r0
 80031ca:	ee75 2a84 	vadd.f32	s5, s11, s8
 80031ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80031d0:	9801      	ldr	r0, [sp, #4]
 80031d2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80031d6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80031da:	ed97 5a01 	vldr	s10, [r7, #4]
 80031de:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80031e2:	46bc      	mov	ip, r7
 80031e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e8:	9605      	str	r6, [sp, #20]
 80031ea:	ee36 7a63 	vsub.f32	s14, s12, s7
 80031ee:	9703      	str	r7, [sp, #12]
 80031f0:	ee12 9a90 	vmov	r9, s5
 80031f4:	ee33 3aa6 	vadd.f32	s6, s7, s13
 80031f8:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80031fc:	1f3e      	subs	r6, r7, #4
 80031fe:	f840 9b08 	str.w	r9, [r0], #8
 8003202:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8003206:	edde 2a01 	vldr	s5, [lr, #4]
 800320a:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800320e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003212:	ed9c 4a01 	vldr	s8, [ip, #4]
 8003216:	ee36 6a22 	vadd.f32	s12, s12, s5
 800321a:	9001      	str	r0, [sp, #4]
 800321c:	ee37 7a45 	vsub.f32	s14, s14, s10
 8003220:	9804      	ldr	r0, [sp, #16]
 8003222:	ee75 6a26 	vadd.f32	s13, s10, s13
 8003226:	f1ae 0704 	sub.w	r7, lr, #4
 800322a:	ee36 6a04 	vadd.f32	s12, s12, s8
 800322e:	ee33 4a45 	vsub.f32	s8, s6, s10
 8003232:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8003236:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800323a:	ed80 6a01 	vstr	s12, [r0, #4]
 800323e:	ee14 9a10 	vmov	r9, s8
 8003242:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003246:	f848 9b08 	str.w	r9, [r8], #8
 800324a:	ed8e 5a01 	vstr	s10, [lr, #4]
 800324e:	ee15 ea90 	vmov	lr, s11
 8003252:	f844 eb08 	str.w	lr, [r4], #8
 8003256:	ee16 ea90 	vmov	lr, s13
 800325a:	9408      	str	r4, [sp, #32]
 800325c:	462c      	mov	r4, r5
 800325e:	ed85 7a01 	vstr	s14, [r5, #4]
 8003262:	9d03      	ldr	r5, [sp, #12]
 8003264:	f84c eb08 	str.w	lr, [ip], #8
 8003268:	edc5 7a01 	vstr	s15, [r5, #4]
 800326c:	0855      	lsrs	r5, r2, #1
 800326e:	9509      	str	r5, [sp, #36]	@ 0x24
 8003270:	f000 8130 	beq.w	80034d4 <arm_cfft_radix8by4_f32+0x36c>
 8003274:	9804      	ldr	r0, [sp, #16]
 8003276:	3b08      	subs	r3, #8
 8003278:	46ab      	mov	fp, r5
 800327a:	f1a4 020c 	sub.w	r2, r4, #12
 800327e:	f100 0510 	add.w	r5, r0, #16
 8003282:	f101 0920 	add.w	r9, r1, #32
 8003286:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800328a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800328e:	4433      	add	r3, r6
 8003290:	3410      	adds	r4, #16
 8003292:	4660      	mov	r0, ip
 8003294:	4641      	mov	r1, r8
 8003296:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800329a:	ed54 6a02 	vldr	s13, [r4, #-8]
 800329e:	f1bb 0b01 	subs.w	fp, fp, #1
 80032a2:	ed55 5a02 	vldr	s11, [r5, #-8]
 80032a6:	f10a 0a08 	add.w	sl, sl, #8
 80032aa:	edd1 7a00 	vldr	s15, [r1]
 80032ae:	f105 0508 	add.w	r5, r5, #8
 80032b2:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80032b6:	edd0 2a00 	vldr	s5, [r0]
 80032ba:	ed14 7a01 	vldr	s14, [r4, #-4]
 80032be:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80032c2:	ed55 6a03 	vldr	s13, [r5, #-12]
 80032c6:	f1a2 0208 	sub.w	r2, r2, #8
 80032ca:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80032ce:	ed90 2a01 	vldr	s4, [r0, #4]
 80032d2:	ee36 5a87 	vadd.f32	s10, s13, s14
 80032d6:	ed91 6a01 	vldr	s12, [r1, #4]
 80032da:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80032de:	f109 0910 	add.w	r9, r9, #16
 80032e2:	ee72 6aa4 	vadd.f32	s13, s5, s9
 80032e6:	f104 0408 	add.w	r4, r4, #8
 80032ea:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80032ee:	f10e 0e18 	add.w	lr, lr, #24
 80032f2:	ee37 3a67 	vsub.f32	s6, s14, s15
 80032f6:	f1a3 0308 	sub.w	r3, r3, #8
 80032fa:	ed45 6a04 	vstr	s13, [r5, #-16]
 80032fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003302:	edd1 6a01 	vldr	s13, [r1, #4]
 8003306:	ee76 1a25 	vadd.f32	s3, s12, s11
 800330a:	edd0 4a01 	vldr	s9, [r0, #4]
 800330e:	ee33 3a22 	vadd.f32	s6, s6, s5
 8003312:	ee75 6a26 	vadd.f32	s13, s10, s13
 8003316:	ee35 5a46 	vsub.f32	s10, s10, s12
 800331a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800331e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003322:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8003326:	ee35 5a42 	vsub.f32	s10, s10, s4
 800332a:	ed45 6a03 	vstr	s13, [r5, #-12]
 800332e:	ee32 2a06 	vadd.f32	s4, s4, s12
 8003332:	edd6 7a00 	vldr	s15, [r6]
 8003336:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800333a:	ed97 1a00 	vldr	s2, [r7]
 800333e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8003342:	ed92 8a04 	vldr	s16, [r2, #16]
 8003346:	ee71 8a27 	vadd.f32	s17, s2, s15
 800334a:	ed93 aa04 	vldr	s20, [r3, #16]
 800334e:	ed16 7a01 	vldr	s14, [r6, #-4]
 8003352:	ee71 7a67 	vsub.f32	s15, s2, s15
 8003356:	ed57 0a01 	vldr	s1, [r7, #-4]
 800335a:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800335e:	ee38 6a88 	vadd.f32	s12, s17, s16
 8003362:	edd3 9a03 	vldr	s19, [r3, #12]
 8003366:	ee30 0a87 	vadd.f32	s0, s1, s14
 800336a:	ed92 9a03 	vldr	s18, [r2, #12]
 800336e:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8003372:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8003376:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800337a:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800337e:	ee16 ca10 	vmov	ip, s12
 8003382:	ee30 6a49 	vsub.f32	s12, s0, s18
 8003386:	ee71 4a07 	vadd.f32	s9, s2, s14
 800338a:	f847 c908 	str.w	ip, [r7], #-8
 800338e:	ee34 4a29 	vadd.f32	s8, s8, s19
 8003392:	edd2 8a03 	vldr	s17, [r2, #12]
 8003396:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800339a:	ed93 8a03 	vldr	s16, [r3, #12]
 800339e:	ee71 0a47 	vsub.f32	s1, s2, s14
 80033a2:	ee30 0a28 	vadd.f32	s0, s0, s17
 80033a6:	ee39 1a67 	vsub.f32	s2, s18, s15
 80033aa:	ee36 6a69 	vsub.f32	s12, s12, s19
 80033ae:	ee30 0a08 	vadd.f32	s0, s0, s16
 80033b2:	ee75 5aca 	vsub.f32	s11, s11, s20
 80033b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80033ba:	ed1a 0a04 	vldr	s0, [sl, #-16]
 80033be:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80033c2:	ee21 8a80 	vmul.f32	s16, s3, s0
 80033c6:	ee23 7a26 	vmul.f32	s14, s6, s13
 80033ca:	ee64 7a26 	vmul.f32	s15, s8, s13
 80033ce:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80033d2:	ee24 4a00 	vmul.f32	s8, s8, s0
 80033d6:	ee23 3a00 	vmul.f32	s6, s6, s0
 80033da:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80033de:	ee24 0a80 	vmul.f32	s0, s9, s0
 80033e2:	ee38 7a07 	vadd.f32	s14, s16, s14
 80033e6:	ee76 6a84 	vadd.f32	s13, s13, s8
 80033ea:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80033ee:	ee33 3a61 	vsub.f32	s6, s6, s3
 80033f2:	ee17 ca10 	vmov	ip, s14
 80033f6:	f841 cb08 	str.w	ip, [r1], #8
 80033fa:	ed01 3a01 	vstr	s6, [r1, #-4]
 80033fe:	ed82 0a04 	vstr	s0, [r2, #16]
 8003402:	edc2 6a03 	vstr	s13, [r2, #12]
 8003406:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800340a:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800340e:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8003412:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8003416:	ee65 4a27 	vmul.f32	s9, s10, s15
 800341a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800341e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8003422:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003426:	ee25 5a26 	vmul.f32	s10, s10, s13
 800342a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800342e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003432:	ee34 6a24 	vadd.f32	s12, s8, s9
 8003436:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800343a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800343e:	ee17 ca90 	vmov	ip, s15
 8003442:	ed04 6a04 	vstr	s12, [r4, #-16]
 8003446:	ed04 5a03 	vstr	s10, [r4, #-12]
 800344a:	f846 c908 	str.w	ip, [r6], #-8
 800344e:	edc6 6a01 	vstr	s13, [r6, #4]
 8003452:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8003456:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800345a:	ee62 5a27 	vmul.f32	s11, s4, s15
 800345e:	ee22 6a87 	vmul.f32	s12, s5, s14
 8003462:	ee22 2a07 	vmul.f32	s4, s4, s14
 8003466:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800346a:	ee61 6a07 	vmul.f32	s13, s2, s14
 800346e:	ee20 7a87 	vmul.f32	s14, s1, s14
 8003472:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003476:	ee61 7a27 	vmul.f32	s15, s2, s15
 800347a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800347e:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8003482:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8003486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348a:	ee16 ca10 	vmov	ip, s12
 800348e:	f840 cb08 	str.w	ip, [r0], #8
 8003492:	ed40 2a01 	vstr	s5, [r0, #-4]
 8003496:	edc3 0a04 	vstr	s1, [r3, #16]
 800349a:	edc3 7a03 	vstr	s15, [r3, #12]
 800349e:	f47f aefc 	bne.w	800329a <arm_cfft_radix8by4_f32+0x132>
 80034a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80034a4:	9805      	ldr	r0, [sp, #20]
 80034a6:	00cb      	lsls	r3, r1, #3
 80034a8:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 80034ac:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80034b0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80034b4:	4498      	add	r8, r3
 80034b6:	449c      	add	ip, r3
 80034b8:	9105      	str	r1, [sp, #20]
 80034ba:	9901      	ldr	r1, [sp, #4]
 80034bc:	4419      	add	r1, r3
 80034be:	9101      	str	r1, [sp, #4]
 80034c0:	9906      	ldr	r1, [sp, #24]
 80034c2:	4419      	add	r1, r3
 80034c4:	9106      	str	r1, [sp, #24]
 80034c6:	9908      	ldr	r1, [sp, #32]
 80034c8:	4419      	add	r1, r3
 80034ca:	9b07      	ldr	r3, [sp, #28]
 80034cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034d0:	9108      	str	r1, [sp, #32]
 80034d2:	9307      	str	r3, [sp, #28]
 80034d4:	9a01      	ldr	r2, [sp, #4]
 80034d6:	2304      	movs	r3, #4
 80034d8:	9e08      	ldr	r6, [sp, #32]
 80034da:	edd2 6a00 	vldr	s13, [r2]
 80034de:	ed96 4a00 	vldr	s8, [r6]
 80034e2:	edd8 7a00 	vldr	s15, [r8]
 80034e6:	ee36 6a84 	vadd.f32	s12, s13, s8
 80034ea:	eddc 2a00 	vldr	s5, [ip]
 80034ee:	ed96 7a01 	vldr	s14, [r6, #4]
 80034f2:	ee36 4ac4 	vsub.f32	s8, s13, s8
 80034f6:	edd2 6a01 	vldr	s13, [r2, #4]
 80034fa:	ee76 4a27 	vadd.f32	s9, s12, s15
 80034fe:	ed98 2a01 	vldr	s4, [r8, #4]
 8003502:	ee76 5a87 	vadd.f32	s11, s13, s14
 8003506:	ed9c 5a01 	vldr	s10, [ip, #4]
 800350a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800350e:	9d05      	ldr	r5, [sp, #20]
 8003510:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8003514:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8003518:	ee72 3a04 	vadd.f32	s7, s4, s8
 800351c:	9804      	ldr	r0, [sp, #16]
 800351e:	ee77 4a67 	vsub.f32	s9, s14, s15
 8003522:	4621      	mov	r1, r4
 8003524:	edc2 6a00 	vstr	s13, [r2]
 8003528:	ee76 6a67 	vsub.f32	s13, s12, s15
 800352c:	ed98 3a01 	vldr	s6, [r8, #4]
 8003530:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8003534:	eddc 1a01 	vldr	s3, [ip, #4]
 8003538:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800353c:	ee35 3a83 	vadd.f32	s6, s11, s6
 8003540:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003544:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8003548:	ee73 5a21 	vadd.f32	s11, s6, s3
 800354c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003550:	ee36 6a45 	vsub.f32	s12, s12, s10
 8003554:	edc2 5a01 	vstr	s11, [r2, #4]
 8003558:	ee35 5a04 	vadd.f32	s10, s10, s8
 800355c:	9a06      	ldr	r2, [sp, #24]
 800355e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003562:	edd2 7a00 	vldr	s15, [r2]
 8003566:	edd2 5a01 	vldr	s11, [r2, #4]
 800356a:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800356e:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8003572:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8003576:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800357a:	ee77 7a62 	vsub.f32	s15, s14, s5
 800357e:	ee74 5a25 	vadd.f32	s11, s8, s11
 8003582:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8003586:	edc8 5a00 	vstr	s11, [r8]
 800358a:	edc8 4a01 	vstr	s9, [r8, #4]
 800358e:	edd5 4a01 	vldr	s9, [r5, #4]
 8003592:	ed95 7a00 	vldr	s14, [r5]
 8003596:	9d07      	ldr	r5, [sp, #28]
 8003598:	ee66 5a87 	vmul.f32	s11, s13, s14
 800359c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80035a0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80035a4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80035a8:	ee77 6a66 	vsub.f32	s13, s14, s13
 80035ac:	ee35 6a86 	vadd.f32	s12, s11, s12
 80035b0:	edc6 6a01 	vstr	s13, [r6, #4]
 80035b4:	ed86 6a00 	vstr	s12, [r6]
 80035b8:	ed95 6a01 	vldr	s12, [r5, #4]
 80035bc:	ed95 7a00 	vldr	s14, [r5]
 80035c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035c2:	ee65 6a07 	vmul.f32	s13, s10, s14
 80035c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035ca:	ee25 5a06 	vmul.f32	s10, s10, s12
 80035ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 80035d2:	ee37 5a45 	vsub.f32	s10, s14, s10
 80035d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035da:	ed8c 5a01 	vstr	s10, [ip, #4]
 80035de:	edcc 7a00 	vstr	s15, [ip]
 80035e2:	6872      	ldr	r2, [r6, #4]
 80035e4:	f000 f978 	bl	80038d8 <arm_radix8_butterfly_f32>
 80035e8:	9802      	ldr	r0, [sp, #8]
 80035ea:	4621      	mov	r1, r4
 80035ec:	6872      	ldr	r2, [r6, #4]
 80035ee:	2304      	movs	r3, #4
 80035f0:	f000 f972 	bl	80038d8 <arm_radix8_butterfly_f32>
 80035f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80035f6:	4621      	mov	r1, r4
 80035f8:	6872      	ldr	r2, [r6, #4]
 80035fa:	2304      	movs	r3, #4
 80035fc:	f000 f96c 	bl	80038d8 <arm_radix8_butterfly_f32>
 8003600:	9803      	ldr	r0, [sp, #12]
 8003602:	4621      	mov	r1, r4
 8003604:	6872      	ldr	r2, [r6, #4]
 8003606:	2304      	movs	r3, #4
 8003608:	b00f      	add	sp, #60	@ 0x3c
 800360a:	ecbd 8b06 	vpop	{d8-d10}
 800360e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003612:	f000 b961 	b.w	80038d8 <arm_radix8_butterfly_f32>
 8003616:	bf00      	nop

08003618 <arm_cfft_f32>:
 8003618:	2a01      	cmp	r2, #1
 800361a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800361e:	4606      	mov	r6, r0
 8003620:	4617      	mov	r7, r2
 8003622:	460c      	mov	r4, r1
 8003624:	4698      	mov	r8, r3
 8003626:	8805      	ldrh	r5, [r0, #0]
 8003628:	d053      	beq.n	80036d2 <arm_cfft_f32+0xba>
 800362a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800362e:	d04b      	beq.n	80036c8 <arm_cfft_f32+0xb0>
 8003630:	d916      	bls.n	8003660 <arm_cfft_f32+0x48>
 8003632:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8003636:	d01a      	beq.n	800366e <arm_cfft_f32+0x56>
 8003638:	d95a      	bls.n	80036f0 <arm_cfft_f32+0xd8>
 800363a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800363e:	d043      	beq.n	80036c8 <arm_cfft_f32+0xb0>
 8003640:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8003644:	d105      	bne.n	8003652 <arm_cfft_f32+0x3a>
 8003646:	4620      	mov	r0, r4
 8003648:	4629      	mov	r1, r5
 800364a:	6872      	ldr	r2, [r6, #4]
 800364c:	2301      	movs	r3, #1
 800364e:	f000 f943 	bl	80038d8 <arm_radix8_butterfly_f32>
 8003652:	f1b8 0f00 	cmp.w	r8, #0
 8003656:	d111      	bne.n	800367c <arm_cfft_f32+0x64>
 8003658:	2f01      	cmp	r7, #1
 800365a:	d016      	beq.n	800368a <arm_cfft_f32+0x72>
 800365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003660:	2d20      	cmp	r5, #32
 8003662:	d031      	beq.n	80036c8 <arm_cfft_f32+0xb0>
 8003664:	d948      	bls.n	80036f8 <arm_cfft_f32+0xe0>
 8003666:	2d40      	cmp	r5, #64	@ 0x40
 8003668:	d0ed      	beq.n	8003646 <arm_cfft_f32+0x2e>
 800366a:	2d80      	cmp	r5, #128	@ 0x80
 800366c:	d1f1      	bne.n	8003652 <arm_cfft_f32+0x3a>
 800366e:	4630      	mov	r0, r6
 8003670:	4621      	mov	r1, r4
 8003672:	f7ff fca7 	bl	8002fc4 <arm_cfft_radix8by2_f32>
 8003676:	f1b8 0f00 	cmp.w	r8, #0
 800367a:	d0ed      	beq.n	8003658 <arm_cfft_f32+0x40>
 800367c:	4620      	mov	r0, r4
 800367e:	89b1      	ldrh	r1, [r6, #12]
 8003680:	68b2      	ldr	r2, [r6, #8]
 8003682:	f7fc fda5 	bl	80001d0 <arm_bitreversal_32>
 8003686:	2f01      	cmp	r7, #1
 8003688:	d1e8      	bne.n	800365c <arm_cfft_f32+0x44>
 800368a:	ee07 5a90 	vmov	s15, r5
 800368e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003692:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003696:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800369a:	2d00      	cmp	r5, #0
 800369c:	d0de      	beq.n	800365c <arm_cfft_f32+0x44>
 800369e:	f104 0108 	add.w	r1, r4, #8
 80036a2:	2300      	movs	r3, #0
 80036a4:	ed11 7a02 	vldr	s14, [r1, #-8]
 80036a8:	3301      	adds	r3, #1
 80036aa:	ed51 7a01 	vldr	s15, [r1, #-4]
 80036ae:	3108      	adds	r1, #8
 80036b0:	429d      	cmp	r5, r3
 80036b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80036b6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80036ba:	ed01 7a04 	vstr	s14, [r1, #-16]
 80036be:	ed41 7a03 	vstr	s15, [r1, #-12]
 80036c2:	d1ef      	bne.n	80036a4 <arm_cfft_f32+0x8c>
 80036c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036c8:	4630      	mov	r0, r6
 80036ca:	4621      	mov	r1, r4
 80036cc:	f7ff fd4c 	bl	8003168 <arm_cfft_radix8by4_f32>
 80036d0:	e7bf      	b.n	8003652 <arm_cfft_f32+0x3a>
 80036d2:	b1a5      	cbz	r5, 80036fe <arm_cfft_f32+0xe6>
 80036d4:	f101 030c 	add.w	r3, r1, #12
 80036d8:	2200      	movs	r2, #0
 80036da:	ed53 7a02 	vldr	s15, [r3, #-8]
 80036de:	3201      	adds	r2, #1
 80036e0:	3308      	adds	r3, #8
 80036e2:	eef1 7a67 	vneg.f32	s15, s15
 80036e6:	4295      	cmp	r5, r2
 80036e8:	ed43 7a04 	vstr	s15, [r3, #-16]
 80036ec:	d1f5      	bne.n	80036da <arm_cfft_f32+0xc2>
 80036ee:	e79c      	b.n	800362a <arm_cfft_f32+0x12>
 80036f0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80036f4:	d0a7      	beq.n	8003646 <arm_cfft_f32+0x2e>
 80036f6:	e7ac      	b.n	8003652 <arm_cfft_f32+0x3a>
 80036f8:	2d10      	cmp	r5, #16
 80036fa:	d0b8      	beq.n	800366e <arm_cfft_f32+0x56>
 80036fc:	e7a9      	b.n	8003652 <arm_cfft_f32+0x3a>
 80036fe:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8003702:	d896      	bhi.n	8003632 <arm_cfft_f32+0x1a>
 8003704:	e7ac      	b.n	8003660 <arm_cfft_f32+0x48>
 8003706:	bf00      	nop

08003708 <arm_cmplx_mag_f32>:
 8003708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003710:	b084      	sub	sp, #16
 8003712:	d07f      	beq.n	8003814 <arm_cmplx_mag_f32+0x10c>
 8003714:	f100 0420 	add.w	r4, r0, #32
 8003718:	f101 0510 	add.w	r5, r1, #16
 800371c:	4646      	mov	r6, r8
 800371e:	2700      	movs	r7, #0
 8003720:	e05a      	b.n	80037d8 <arm_cmplx_mag_f32+0xd0>
 8003722:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003726:	eeb4 0a40 	vcmp.f32	s0, s0
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	f040 80a4 	bne.w	800387a <arm_cmplx_mag_f32+0x172>
 8003732:	ed05 0a04 	vstr	s0, [r5, #-16]
 8003736:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800373a:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800373e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003742:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003746:	ee77 7a80 	vadd.f32	s15, s15, s0
 800374a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003752:	f2c0 808f 	blt.w	8003874 <arm_cmplx_mag_f32+0x16c>
 8003756:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800375a:	eeb4 0a40 	vcmp.f32	s0, s0
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	f040 80af 	bne.w	80038c4 <arm_cmplx_mag_f32+0x1bc>
 8003766:	ed05 0a03 	vstr	s0, [r5, #-12]
 800376a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800376e:	ed14 0a03 	vldr	s0, [r4, #-12]
 8003772:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003776:	ee20 0a00 	vmul.f32	s0, s0, s0
 800377a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800377e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003786:	db72      	blt.n	800386e <arm_cmplx_mag_f32+0x166>
 8003788:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800378c:	eeb4 0a40 	vcmp.f32	s0, s0
 8003790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003794:	f040 808c 	bne.w	80038b0 <arm_cmplx_mag_f32+0x1a8>
 8003798:	ed05 0a02 	vstr	s0, [r5, #-8]
 800379c:	ed54 7a02 	vldr	s15, [r4, #-8]
 80037a0:	ed14 0a01 	vldr	s0, [r4, #-4]
 80037a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80037ac:	ee77 7a80 	vadd.f32	s15, s15, s0
 80037b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b8:	db20      	blt.n	80037fc <arm_cmplx_mag_f32+0xf4>
 80037ba:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80037be:	eeb4 0a40 	vcmp.f32	s0, s0
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	d169      	bne.n	800389c <arm_cmplx_mag_f32+0x194>
 80037c8:	3e01      	subs	r6, #1
 80037ca:	ed05 0a01 	vstr	s0, [r5, #-4]
 80037ce:	f104 0420 	add.w	r4, r4, #32
 80037d2:	f105 0510 	add.w	r5, r5, #16
 80037d6:	d019      	beq.n	800380c <arm_cmplx_mag_f32+0x104>
 80037d8:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 80037dc:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 80037e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80037e8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80037ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	da95      	bge.n	8003722 <arm_cmplx_mag_f32+0x1a>
 80037f6:	f845 7c10 	str.w	r7, [r5, #-16]
 80037fa:	e79c      	b.n	8003736 <arm_cmplx_mag_f32+0x2e>
 80037fc:	3e01      	subs	r6, #1
 80037fe:	f845 7c04 	str.w	r7, [r5, #-4]
 8003802:	f104 0420 	add.w	r4, r4, #32
 8003806:	f105 0510 	add.w	r5, r5, #16
 800380a:	d1e5      	bne.n	80037d8 <arm_cmplx_mag_f32+0xd0>
 800380c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8003810:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8003814:	f012 0503 	ands.w	r5, r2, #3
 8003818:	d026      	beq.n	8003868 <arm_cmplx_mag_f32+0x160>
 800381a:	f100 0408 	add.w	r4, r0, #8
 800381e:	2600      	movs	r6, #0
 8003820:	e00c      	b.n	800383c <arm_cmplx_mag_f32+0x134>
 8003822:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003826:	eeb4 0a40 	vcmp.f32	s0, s0
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	d12e      	bne.n	800388e <arm_cmplx_mag_f32+0x186>
 8003830:	3d01      	subs	r5, #1
 8003832:	ed01 0a01 	vstr	s0, [r1, #-4]
 8003836:	f104 0408 	add.w	r4, r4, #8
 800383a:	d015      	beq.n	8003868 <arm_cmplx_mag_f32+0x160>
 800383c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8003840:	3104      	adds	r1, #4
 8003842:	ed14 0a01 	vldr	s0, [r4, #-4]
 8003846:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800384a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800384e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	dae2      	bge.n	8003822 <arm_cmplx_mag_f32+0x11a>
 800385c:	3d01      	subs	r5, #1
 800385e:	f841 6c04 	str.w	r6, [r1, #-4]
 8003862:	f104 0408 	add.w	r4, r4, #8
 8003866:	d1e9      	bne.n	800383c <arm_cmplx_mag_f32+0x134>
 8003868:	b004      	add	sp, #16
 800386a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800386e:	f845 7c08 	str.w	r7, [r5, #-8]
 8003872:	e793      	b.n	800379c <arm_cmplx_mag_f32+0x94>
 8003874:	f845 7c0c 	str.w	r7, [r5, #-12]
 8003878:	e777      	b.n	800376a <arm_cmplx_mag_f32+0x62>
 800387a:	eeb0 0a67 	vmov.f32	s0, s15
 800387e:	9203      	str	r2, [sp, #12]
 8003880:	9102      	str	r1, [sp, #8]
 8003882:	9001      	str	r0, [sp, #4]
 8003884:	f000 ffd4 	bl	8004830 <sqrtf>
 8003888:	a801      	add	r0, sp, #4
 800388a:	c807      	ldmia	r0, {r0, r1, r2}
 800388c:	e751      	b.n	8003732 <arm_cmplx_mag_f32+0x2a>
 800388e:	eeb0 0a67 	vmov.f32	s0, s15
 8003892:	9101      	str	r1, [sp, #4]
 8003894:	f000 ffcc 	bl	8004830 <sqrtf>
 8003898:	9901      	ldr	r1, [sp, #4]
 800389a:	e7c9      	b.n	8003830 <arm_cmplx_mag_f32+0x128>
 800389c:	eeb0 0a67 	vmov.f32	s0, s15
 80038a0:	9203      	str	r2, [sp, #12]
 80038a2:	9102      	str	r1, [sp, #8]
 80038a4:	9001      	str	r0, [sp, #4]
 80038a6:	f000 ffc3 	bl	8004830 <sqrtf>
 80038aa:	a801      	add	r0, sp, #4
 80038ac:	c807      	ldmia	r0, {r0, r1, r2}
 80038ae:	e78b      	b.n	80037c8 <arm_cmplx_mag_f32+0xc0>
 80038b0:	eeb0 0a67 	vmov.f32	s0, s15
 80038b4:	9203      	str	r2, [sp, #12]
 80038b6:	9102      	str	r1, [sp, #8]
 80038b8:	9001      	str	r0, [sp, #4]
 80038ba:	f000 ffb9 	bl	8004830 <sqrtf>
 80038be:	a801      	add	r0, sp, #4
 80038c0:	c807      	ldmia	r0, {r0, r1, r2}
 80038c2:	e769      	b.n	8003798 <arm_cmplx_mag_f32+0x90>
 80038c4:	eeb0 0a67 	vmov.f32	s0, s15
 80038c8:	9203      	str	r2, [sp, #12]
 80038ca:	9102      	str	r1, [sp, #8]
 80038cc:	9001      	str	r0, [sp, #4]
 80038ce:	f000 ffaf 	bl	8004830 <sqrtf>
 80038d2:	a801      	add	r0, sp, #4
 80038d4:	c807      	ldmia	r0, {r0, r1, r2}
 80038d6:	e746      	b.n	8003766 <arm_cmplx_mag_f32+0x5e>

080038d8 <arm_radix8_butterfly_f32>:
 80038d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038dc:	469e      	mov	lr, r3
 80038de:	1d03      	adds	r3, r0, #4
 80038e0:	4683      	mov	fp, r0
 80038e2:	468a      	mov	sl, r1
 80038e4:	4688      	mov	r8, r1
 80038e6:	469c      	mov	ip, r3
 80038e8:	ed2d 8b10 	vpush	{d8-d15}
 80038ec:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 8003c00 <arm_radix8_butterfly_f32+0x328>
 80038f0:	b09f      	sub	sp, #124	@ 0x7c
 80038f2:	921c      	str	r2, [sp, #112]	@ 0x70
 80038f4:	931d      	str	r3, [sp, #116]	@ 0x74
 80038f6:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 80038fa:	f04f 0900 	mov.w	r9, #0
 80038fe:	461a      	mov	r2, r3
 8003900:	930e      	str	r3, [sp, #56]	@ 0x38
 8003902:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003906:	0051      	lsls	r1, r2, #1
 8003908:	4608      	mov	r0, r1
 800390a:	9103      	str	r1, [sp, #12]
 800390c:	00d1      	lsls	r1, r2, #3
 800390e:	1885      	adds	r5, r0, r2
 8003910:	0110      	lsls	r0, r2, #4
 8003912:	eb0b 0601 	add.w	r6, fp, r1
 8003916:	9101      	str	r1, [sp, #4]
 8003918:	18ac      	adds	r4, r5, r2
 800391a:	9002      	str	r0, [sp, #8]
 800391c:	1877      	adds	r7, r6, r1
 800391e:	4611      	mov	r1, r2
 8003920:	4422      	add	r2, r4
 8003922:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8003926:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800392a:	1850      	adds	r0, r2, r1
 800392c:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8003930:	4401      	add	r1, r0
 8003932:	3204      	adds	r2, #4
 8003934:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8003938:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800393c:	3104      	adds	r1, #4
 800393e:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8003942:	44c1      	add	r9, r8
 8003944:	edd4 6a00 	vldr	s13, [r4]
 8003948:	ed97 6a00 	vldr	s12, [r7]
 800394c:	45ca      	cmp	sl, r9
 800394e:	edd0 7a00 	vldr	s15, [r0]
 8003952:	ee37 5a66 	vsub.f32	s10, s14, s13
 8003956:	edd6 5a00 	vldr	s11, [r6]
 800395a:	ee37 2a26 	vadd.f32	s4, s14, s13
 800395e:	ee76 2a67 	vsub.f32	s5, s12, s15
 8003962:	edd5 6a00 	vldr	s13, [r5]
 8003966:	ed12 7a01 	vldr	s14, [r2, #-4]
 800396a:	ee76 4a27 	vadd.f32	s9, s12, s15
 800396e:	ed11 6a01 	vldr	s12, [r1, #-4]
 8003972:	ee75 1a87 	vadd.f32	s3, s11, s14
 8003976:	ee36 4a86 	vadd.f32	s8, s13, s12
 800397a:	ee72 7a24 	vadd.f32	s15, s4, s9
 800397e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8003982:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8003986:	ee31 6a84 	vadd.f32	s12, s3, s8
 800398a:	ee32 2a64 	vsub.f32	s4, s4, s9
 800398e:	ee77 6a65 	vsub.f32	s13, s14, s11
 8003992:	ee77 4a86 	vadd.f32	s9, s15, s12
 8003996:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800399a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800399e:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80039a2:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80039a6:	edc4 7a00 	vstr	s15, [r4]
 80039aa:	ee66 6a89 	vmul.f32	s13, s13, s18
 80039ae:	edd6 5a01 	vldr	s11, [r6, #4]
 80039b2:	ee27 6a09 	vmul.f32	s12, s14, s18
 80039b6:	edd5 3a01 	vldr	s7, [r5, #4]
 80039ba:	ed92 4a00 	vldr	s8, [r2]
 80039be:	ee35 1a26 	vadd.f32	s2, s10, s13
 80039c2:	edd1 4a00 	vldr	s9, [r1]
 80039c6:	ee75 6a66 	vsub.f32	s13, s10, s13
 80039ca:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80039ce:	ed94 0a01 	vldr	s0, [r4, #4]
 80039d2:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80039d6:	ed9c 7a00 	vldr	s14, [ip]
 80039da:	edd0 0a01 	vldr	s1, [r0, #4]
 80039de:	ee35 4a84 	vadd.f32	s8, s11, s8
 80039e2:	ed97 5a01 	vldr	s10, [r7, #4]
 80039e6:	ee73 4aa4 	vadd.f32	s9, s7, s9
 80039ea:	ee73 5a27 	vadd.f32	s11, s6, s15
 80039ee:	ee77 3a00 	vadd.f32	s7, s14, s0
 80039f2:	ee33 3a67 	vsub.f32	s6, s6, s15
 80039f6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80039fa:	ee35 0a20 	vadd.f32	s0, s10, s1
 80039fe:	ee63 7a09 	vmul.f32	s15, s6, s18
 8003a02:	ee35 5a60 	vsub.f32	s10, s10, s1
 8003a06:	ee33 3a80 	vadd.f32	s6, s7, s0
 8003a0a:	ee74 0a24 	vadd.f32	s1, s8, s9
 8003a0e:	ee65 5a89 	vmul.f32	s11, s11, s18
 8003a12:	ee74 4a64 	vsub.f32	s9, s8, s9
 8003a16:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8003a1a:	ee75 3a25 	vadd.f32	s7, s10, s11
 8003a1e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003a22:	ee37 5a27 	vadd.f32	s10, s14, s15
 8003a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a2a:	ee32 7a86 	vadd.f32	s14, s5, s12
 8003a2e:	ee32 6ac6 	vsub.f32	s12, s5, s12
 8003a32:	ee73 2a20 	vadd.f32	s5, s6, s1
 8003a36:	ee33 3a60 	vsub.f32	s6, s6, s1
 8003a3a:	ee72 0a24 	vadd.f32	s1, s4, s9
 8003a3e:	edcc 2a00 	vstr	s5, [ip]
 8003a42:	ee72 4a64 	vsub.f32	s9, s4, s9
 8003a46:	ed84 3a01 	vstr	s6, [r4, #4]
 8003a4a:	ee74 2a61 	vsub.f32	s5, s8, s3
 8003a4e:	ee31 3a23 	vadd.f32	s6, s2, s7
 8003a52:	edc7 0a00 	vstr	s1, [r7]
 8003a56:	ee31 1a63 	vsub.f32	s2, s2, s7
 8003a5a:	edc0 4a00 	vstr	s9, [r0]
 8003a5e:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8003a62:	edc7 2a01 	vstr	s5, [r7, #4]
 8003a66:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8003a6a:	441c      	add	r4, r3
 8003a6c:	ee75 5a47 	vsub.f32	s11, s10, s14
 8003a70:	449c      	add	ip, r3
 8003a72:	ee35 5a07 	vadd.f32	s10, s10, s14
 8003a76:	441f      	add	r7, r3
 8003a78:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8003a7c:	ee34 4a21 	vadd.f32	s8, s8, s3
 8003a80:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003a84:	ed80 4a01 	vstr	s8, [r0, #4]
 8003a88:	4418      	add	r0, r3
 8003a8a:	ed86 3a00 	vstr	s6, [r6]
 8003a8e:	ed01 1a01 	vstr	s2, [r1, #-4]
 8003a92:	ed42 3a01 	vstr	s7, [r2, #-4]
 8003a96:	edc5 6a00 	vstr	s13, [r5]
 8003a9a:	edc6 5a01 	vstr	s11, [r6, #4]
 8003a9e:	441e      	add	r6, r3
 8003aa0:	ed81 5a00 	vstr	s10, [r1]
 8003aa4:	4419      	add	r1, r3
 8003aa6:	ed82 7a00 	vstr	s14, [r2]
 8003aaa:	441a      	add	r2, r3
 8003aac:	edc5 7a01 	vstr	s15, [r5, #4]
 8003ab0:	441d      	add	r5, r3
 8003ab2:	f63f af44 	bhi.w	800393e <arm_radix8_butterfly_f32+0x66>
 8003ab6:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8003ab8:	2f07      	cmp	r7, #7
 8003aba:	f240 81e8 	bls.w	8003e8e <arm_radix8_butterfly_f32+0x5b6>
 8003abe:	9903      	ldr	r1, [sp, #12]
 8003ac0:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8003ac4:	9e01      	ldr	r6, [sp, #4]
 8003ac6:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8003aca:	19ca      	adds	r2, r1, r7
 8003acc:	1c4c      	adds	r4, r1, #1
 8003ace:	eb05 010e 	add.w	r1, r5, lr
 8003ad2:	00ed      	lsls	r5, r5, #3
 8003ad4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8003ad8:	3608      	adds	r6, #8
 8003ada:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003adc:	eb01 050e 	add.w	r5, r1, lr
 8003ae0:	00c9      	lsls	r1, r1, #3
 8003ae2:	443c      	add	r4, r7
 8003ae4:	9618      	str	r6, [sp, #96]	@ 0x60
 8003ae6:	00ee      	lsls	r6, r5, #3
 8003ae8:	460f      	mov	r7, r1
 8003aea:	9114      	str	r1, [sp, #80]	@ 0x50
 8003aec:	9902      	ldr	r1, [sp, #8]
 8003aee:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8003af2:	9611      	str	r6, [sp, #68]	@ 0x44
 8003af4:	00c0      	lsls	r0, r0, #3
 8003af6:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8003af8:	3108      	adds	r1, #8
 8003afa:	3404      	adds	r4, #4
 8003afc:	f04f 0901 	mov.w	r9, #1
 8003b00:	9119      	str	r1, [sp, #100]	@ 0x64
 8003b02:	eb05 010e 	add.w	r1, r5, lr
 8003b06:	4635      	mov	r5, r6
 8003b08:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	443d      	add	r5, r7
 8003b0e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8003b10:	9507      	str	r5, [sp, #28]
 8003b12:	eb01 050e 	add.w	r5, r1, lr
 8003b16:	00c9      	lsls	r1, r1, #3
 8003b18:	19f7      	adds	r7, r6, r7
 8003b1a:	00ed      	lsls	r5, r5, #3
 8003b1c:	9110      	str	r1, [sp, #64]	@ 0x40
 8003b1e:	00d1      	lsls	r1, r2, #3
 8003b20:	970a      	str	r7, [sp, #40]	@ 0x28
 8003b22:	462f      	mov	r7, r5
 8003b24:	9515      	str	r5, [sp, #84]	@ 0x54
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8003b2a:	19f4      	adds	r4, r6, r7
 8003b2c:	320c      	adds	r2, #12
 8003b2e:	3108      	adds	r1, #8
 8003b30:	1975      	adds	r5, r6, r5
 8003b32:	9408      	str	r4, [sp, #32]
 8003b34:	9217      	str	r2, [sp, #92]	@ 0x5c
 8003b36:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8003b3a:	9509      	str	r5, [sp, #36]	@ 0x24
 8003b3c:	f100 020c 	add.w	r2, r0, #12
 8003b40:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8003b42:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8003b44:	1975      	adds	r5, r6, r5
 8003b46:	9216      	str	r2, [sp, #88]	@ 0x58
 8003b48:	1932      	adds	r2, r6, r4
 8003b4a:	911b      	str	r1, [sp, #108]	@ 0x6c
 8003b4c:	9505      	str	r5, [sp, #20]
 8003b4e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8003b52:	0179      	lsls	r1, r7, #5
 8003b54:	9204      	str	r2, [sp, #16]
 8003b56:	1972      	adds	r2, r6, r5
 8003b58:	9412      	str	r4, [sp, #72]	@ 0x48
 8003b5a:	9513      	str	r5, [sp, #76]	@ 0x4c
 8003b5c:	9206      	str	r2, [sp, #24]
 8003b5e:	f101 0208 	add.w	r2, r1, #8
 8003b62:	921a      	str	r2, [sp, #104]	@ 0x68
 8003b64:	2200      	movs	r2, #0
 8003b66:	f102 0108 	add.w	r1, r2, #8
 8003b6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003b6c:	46cc      	mov	ip, r9
 8003b6e:	460f      	mov	r7, r1
 8003b70:	910c      	str	r1, [sp, #48]	@ 0x30
 8003b72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003b74:	eb0b 0e07 	add.w	lr, fp, r7
 8003b78:	9f04      	ldr	r7, [sp, #16]
 8003b7a:	188e      	adds	r6, r1, r2
 8003b7c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8003b7e:	edd7 fa00 	vldr	s31, [r7]
 8003b82:	9f06      	ldr	r7, [sp, #24]
 8003b84:	188d      	adds	r5, r1, r2
 8003b86:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8003b88:	445e      	add	r6, fp
 8003b8a:	ed97 fa00 	vldr	s30, [r7]
 8003b8e:	445d      	add	r5, fp
 8003b90:	9f05      	ldr	r7, [sp, #20]
 8003b92:	188c      	adds	r4, r1, r2
 8003b94:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8003b96:	edd7 ea00 	vldr	s29, [r7]
 8003b9a:	445c      	add	r4, fp
 8003b9c:	9f07      	ldr	r7, [sp, #28]
 8003b9e:	1888      	adds	r0, r1, r2
 8003ba0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8003ba2:	ed97 ea00 	vldr	s28, [r7]
 8003ba6:	4458      	add	r0, fp
 8003ba8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8003baa:	4411      	add	r1, r2
 8003bac:	441a      	add	r2, r3
 8003bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003bb0:	edd7 da00 	vldr	s27, [r7]
 8003bb4:	4459      	add	r1, fp
 8003bb6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8003bb8:	445a      	add	r2, fp
 8003bba:	930d      	str	r3, [sp, #52]	@ 0x34
 8003bbc:	ed97 da00 	vldr	s26, [r7]
 8003bc0:	9f08      	ldr	r7, [sp, #32]
 8003bc2:	edd7 ca00 	vldr	s25, [r7]
 8003bc6:	9f04      	ldr	r7, [sp, #16]
 8003bc8:	ed97 ca01 	vldr	s24, [r7, #4]
 8003bcc:	9f06      	ldr	r7, [sp, #24]
 8003bce:	edd7 ba01 	vldr	s23, [r7, #4]
 8003bd2:	9f05      	ldr	r7, [sp, #20]
 8003bd4:	ed97 ba01 	vldr	s22, [r7, #4]
 8003bd8:	9f07      	ldr	r7, [sp, #28]
 8003bda:	edd7 aa01 	vldr	s21, [r7, #4]
 8003bde:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8003be0:	ed97 aa01 	vldr	s20, [r7, #4]
 8003be4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8003be6:	9b01      	ldr	r3, [sp, #4]
 8003be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bec:	9f08      	ldr	r7, [sp, #32]
 8003bee:	edcd 7a02 	vstr	s15, [sp, #8]
 8003bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bf6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8003bf8:	edcd 7a03 	vstr	s15, [sp, #12]
 8003bfc:	e002      	b.n	8003c04 <arm_radix8_butterfly_f32+0x32c>
 8003bfe:	bf00      	nop
 8003c00:	3f3504f3 	.word	0x3f3504f3
 8003c04:	ed90 2a00 	vldr	s4, [r0]
 8003c08:	44c4      	add	ip, r8
 8003c0a:	ed96 7a00 	vldr	s14, [r6]
 8003c0e:	ed94 8a00 	vldr	s16, [r4]
 8003c12:	45e2      	cmp	sl, ip
 8003c14:	ed52 7a01 	vldr	s15, [r2, #-4]
 8003c18:	ed95 5a00 	vldr	s10, [r5]
 8003c1c:	ed51 5a01 	vldr	s11, [r1, #-4]
 8003c20:	ee38 6a27 	vadd.f32	s12, s16, s15
 8003c24:	ed9e 1a00 	vldr	s2, [lr]
 8003c28:	ee78 2a67 	vsub.f32	s5, s16, s15
 8003c2c:	ed17 4a01 	vldr	s8, [r7, #-4]
 8003c30:	ee75 3a25 	vadd.f32	s7, s10, s11
 8003c34:	ee31 3a07 	vadd.f32	s6, s2, s14
 8003c38:	edde 4a01 	vldr	s9, [lr, #4]
 8003c3c:	ee72 6a04 	vadd.f32	s13, s4, s8
 8003c40:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003c44:	ee73 1a06 	vadd.f32	s3, s6, s12
 8003c48:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8003c4c:	ee32 4a44 	vsub.f32	s8, s4, s8
 8003c50:	ee31 1a47 	vsub.f32	s2, s2, s14
 8003c54:	ee31 7a85 	vadd.f32	s14, s3, s10
 8003c58:	ee75 7a84 	vadd.f32	s15, s11, s8
 8003c5c:	ee33 3a46 	vsub.f32	s6, s6, s12
 8003c60:	ed8e 7a00 	vstr	s14, [lr]
 8003c64:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8003c68:	ee67 7a89 	vmul.f32	s15, s15, s18
 8003c6c:	ed90 2a01 	vldr	s4, [r0, #4]
 8003c70:	ed95 7a01 	vldr	s14, [r5, #4]
 8003c74:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8003c78:	ed91 6a00 	vldr	s12, [r1]
 8003c7c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8003c80:	edd7 8a00 	vldr	s17, [r7]
 8003c84:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8003c88:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8003c8c:	edd2 0a00 	vldr	s1, [r2]
 8003c90:	ee72 6a68 	vsub.f32	s13, s4, s17
 8003c94:	edd6 7a01 	vldr	s15, [r6, #4]
 8003c98:	ee77 2a46 	vsub.f32	s5, s14, s12
 8003c9c:	ee37 0a06 	vadd.f32	s0, s14, s12
 8003ca0:	ed94 7a01 	vldr	s14, [r4, #4]
 8003ca4:	ee32 6a28 	vadd.f32	s12, s4, s17
 8003ca8:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8003cac:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8003cb0:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8003cb4:	ee77 6a20 	vadd.f32	s13, s14, s1
 8003cb8:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8003cbc:	ee37 7a60 	vsub.f32	s14, s14, s1
 8003cc0:	ee24 4a09 	vmul.f32	s8, s8, s18
 8003cc4:	ee70 0a06 	vadd.f32	s1, s0, s12
 8003cc8:	ee69 7a89 	vmul.f32	s15, s19, s18
 8003ccc:	ee62 2a89 	vmul.f32	s5, s5, s18
 8003cd0:	ee30 6a46 	vsub.f32	s12, s0, s12
 8003cd4:	ee32 0a26 	vadd.f32	s0, s4, s13
 8003cd8:	ee72 6a66 	vsub.f32	s13, s4, s13
 8003cdc:	ee77 8a62 	vsub.f32	s17, s14, s5
 8003ce0:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8003ce4:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8003ce8:	ee77 4a22 	vadd.f32	s9, s14, s5
 8003cec:	ee71 2a04 	vadd.f32	s5, s2, s8
 8003cf0:	ee31 7a44 	vsub.f32	s14, s2, s8
 8003cf4:	ee30 1a60 	vsub.f32	s2, s0, s1
 8003cf8:	ee73 1a06 	vadd.f32	s3, s6, s12
 8003cfc:	ee33 6a46 	vsub.f32	s12, s6, s12
 8003d00:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8003d04:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8003d08:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8003d0c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8003d10:	ee72 3a65 	vsub.f32	s7, s4, s11
 8003d14:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8003d18:	ee72 5a25 	vadd.f32	s11, s4, s11
 8003d1c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8003d20:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8003d24:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8003d28:	ee77 2a28 	vadd.f32	s5, s14, s17
 8003d2c:	ee37 7a68 	vsub.f32	s14, s14, s17
 8003d30:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8003d34:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8003d38:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8003d3c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003d40:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8003d44:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8003d48:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8003d4c:	edce 0a01 	vstr	s1, [lr, #4]
 8003d50:	ee38 8a88 	vadd.f32	s16, s17, s16
 8003d54:	449e      	add	lr, r3
 8003d56:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8003d5a:	ee31 5a45 	vsub.f32	s10, s2, s10
 8003d5e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8003d62:	ed86 8a00 	vstr	s16, [r6]
 8003d66:	ee39 0a80 	vadd.f32	s0, s19, s0
 8003d6a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003d6e:	ed86 5a01 	vstr	s10, [r6, #4]
 8003d72:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8003d76:	edcd 3a01 	vstr	s7, [sp, #4]
 8003d7a:	ed9d 5a03 	vldr	s10, [sp, #12]
 8003d7e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8003d82:	eddd 3a02 	vldr	s7, [sp, #8]
 8003d86:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8003d8a:	ed84 0a00 	vstr	s0, [r4]
 8003d8e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8003d92:	ed84 3a01 	vstr	s6, [r4, #4]
 8003d96:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8003d9a:	ee23 6a86 	vmul.f32	s12, s7, s12
 8003d9e:	eddd 3a01 	vldr	s7, [sp, #4]
 8003da2:	ee25 5a25 	vmul.f32	s10, s10, s11
 8003da6:	441e      	add	r6, r3
 8003da8:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8003dac:	441c      	add	r4, r3
 8003dae:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8003db2:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8003db6:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8003dba:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8003dbe:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8003dc2:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8003dc6:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8003dca:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8003dce:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8003dd2:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8003dd6:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8003dda:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003dde:	ee38 8a01 	vadd.f32	s16, s16, s2
 8003de2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8003de6:	ee39 5a85 	vadd.f32	s10, s19, s10
 8003dea:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8003dee:	ed02 8a01 	vstr	s16, [r2, #-4]
 8003df2:	ee30 0a21 	vadd.f32	s0, s0, s3
 8003df6:	ed82 6a00 	vstr	s12, [r2]
 8003dfa:	ee74 2a62 	vsub.f32	s5, s8, s5
 8003dfe:	edc5 0a00 	vstr	s1, [r5]
 8003e02:	ee33 3a28 	vadd.f32	s6, s6, s17
 8003e06:	edc5 3a01 	vstr	s7, [r5, #4]
 8003e0a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003e0e:	ed07 5a01 	vstr	s10, [r7, #-4]
 8003e12:	edc7 4a00 	vstr	s9, [r7]
 8003e16:	441d      	add	r5, r3
 8003e18:	ed01 0a01 	vstr	s0, [r1, #-4]
 8003e1c:	441a      	add	r2, r3
 8003e1e:	edc1 2a00 	vstr	s5, [r1]
 8003e22:	441f      	add	r7, r3
 8003e24:	ed80 3a00 	vstr	s6, [r0]
 8003e28:	4419      	add	r1, r3
 8003e2a:	ed80 7a01 	vstr	s14, [r0, #4]
 8003e2e:	4418      	add	r0, r3
 8003e30:	f63f aee8 	bhi.w	8003c04 <arm_radix8_butterfly_f32+0x32c>
 8003e34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e36:	f109 0901 	add.w	r9, r9, #1
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	9b04      	ldr	r3, [sp, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	9b06      	ldr	r3, [sp, #24]
 8003e46:	4413      	add	r3, r2
 8003e48:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003e4a:	9306      	str	r3, [sp, #24]
 8003e4c:	9b05      	ldr	r3, [sp, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003e52:	9305      	str	r3, [sp, #20]
 8003e54:	9b07      	ldr	r3, [sp, #28]
 8003e56:	4413      	add	r3, r2
 8003e58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003e5a:	9307      	str	r3, [sp, #28]
 8003e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e5e:	4413      	add	r3, r2
 8003e60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8003e62:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e66:	4413      	add	r3, r2
 8003e68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e6c:	9b08      	ldr	r3, [sp, #32]
 8003e6e:	4413      	add	r3, r2
 8003e70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003e72:	9308      	str	r3, [sp, #32]
 8003e74:	3208      	adds	r2, #8
 8003e76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e78:	920b      	str	r2, [sp, #44]	@ 0x2c
 8003e7a:	4599      	cmp	r9, r3
 8003e7c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003e7e:	f47f ae72 	bne.w	8003b66 <arm_radix8_butterfly_f32+0x28e>
 8003e82:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8003e86:	46c8      	mov	r8, r9
 8003e88:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 8003e8c:	e533      	b.n	80038f6 <arm_radix8_butterfly_f32+0x1e>
 8003e8e:	b01f      	add	sp, #124	@ 0x7c
 8003e90:	ecbd 8b10 	vpop	{d8-d15}
 8003e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003e98 <siprintf>:
 8003e98:	b40e      	push	{r1, r2, r3}
 8003e9a:	b500      	push	{lr}
 8003e9c:	b09c      	sub	sp, #112	@ 0x70
 8003e9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003ea0:	9002      	str	r0, [sp, #8]
 8003ea2:	9006      	str	r0, [sp, #24]
 8003ea4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ea8:	4809      	ldr	r0, [pc, #36]	@ (8003ed0 <siprintf+0x38>)
 8003eaa:	9107      	str	r1, [sp, #28]
 8003eac:	9104      	str	r1, [sp, #16]
 8003eae:	4909      	ldr	r1, [pc, #36]	@ (8003ed4 <siprintf+0x3c>)
 8003eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eb4:	9105      	str	r1, [sp, #20]
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	a902      	add	r1, sp, #8
 8003ebc:	f000 f994 	bl	80041e8 <_svfiprintf_r>
 8003ec0:	9b02      	ldr	r3, [sp, #8]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	b01c      	add	sp, #112	@ 0x70
 8003ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ecc:	b003      	add	sp, #12
 8003ece:	4770      	bx	lr
 8003ed0:	2000000c 	.word	0x2000000c
 8003ed4:	ffff0208 	.word	0xffff0208

08003ed8 <memset>:
 8003ed8:	4402      	add	r2, r0
 8003eda:	4603      	mov	r3, r0
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d100      	bne.n	8003ee2 <memset+0xa>
 8003ee0:	4770      	bx	lr
 8003ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee6:	e7f9      	b.n	8003edc <memset+0x4>

08003ee8 <__errno>:
 8003ee8:	4b01      	ldr	r3, [pc, #4]	@ (8003ef0 <__errno+0x8>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	2000000c 	.word	0x2000000c

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2600      	movs	r6, #0
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4d0b      	ldr	r5, [pc, #44]	@ (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	@ (8003f38 <__libc_init_array+0x44>)
 8003f08:	f000 fd8e 	bl	8004a28 <_init>
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2600      	movs	r6, #0
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08017fc0 	.word	0x08017fc0
 8003f30:	08017fc0 	.word	0x08017fc0
 8003f34:	08017fc0 	.word	0x08017fc0
 8003f38:	08017fc4 	.word	0x08017fc4

08003f3c <__retarget_lock_acquire_recursive>:
 8003f3c:	4770      	bx	lr

08003f3e <__retarget_lock_release_recursive>:
 8003f3e:	4770      	bx	lr

08003f40 <_free_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4605      	mov	r5, r0
 8003f44:	2900      	cmp	r1, #0
 8003f46:	d041      	beq.n	8003fcc <_free_r+0x8c>
 8003f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f4c:	1f0c      	subs	r4, r1, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bfb8      	it	lt
 8003f52:	18e4      	addlt	r4, r4, r3
 8003f54:	f000 f8e0 	bl	8004118 <__malloc_lock>
 8003f58:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd0 <_free_r+0x90>)
 8003f5a:	6813      	ldr	r3, [r2, #0]
 8003f5c:	b933      	cbnz	r3, 8003f6c <_free_r+0x2c>
 8003f5e:	6063      	str	r3, [r4, #4]
 8003f60:	6014      	str	r4, [r2, #0]
 8003f62:	4628      	mov	r0, r5
 8003f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f68:	f000 b8dc 	b.w	8004124 <__malloc_unlock>
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d908      	bls.n	8003f82 <_free_r+0x42>
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	1821      	adds	r1, r4, r0
 8003f74:	428b      	cmp	r3, r1
 8003f76:	bf01      	itttt	eq
 8003f78:	6819      	ldreq	r1, [r3, #0]
 8003f7a:	685b      	ldreq	r3, [r3, #4]
 8003f7c:	1809      	addeq	r1, r1, r0
 8003f7e:	6021      	streq	r1, [r4, #0]
 8003f80:	e7ed      	b.n	8003f5e <_free_r+0x1e>
 8003f82:	461a      	mov	r2, r3
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	b10b      	cbz	r3, 8003f8c <_free_r+0x4c>
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	d9fa      	bls.n	8003f82 <_free_r+0x42>
 8003f8c:	6811      	ldr	r1, [r2, #0]
 8003f8e:	1850      	adds	r0, r2, r1
 8003f90:	42a0      	cmp	r0, r4
 8003f92:	d10b      	bne.n	8003fac <_free_r+0x6c>
 8003f94:	6820      	ldr	r0, [r4, #0]
 8003f96:	4401      	add	r1, r0
 8003f98:	1850      	adds	r0, r2, r1
 8003f9a:	4283      	cmp	r3, r0
 8003f9c:	6011      	str	r1, [r2, #0]
 8003f9e:	d1e0      	bne.n	8003f62 <_free_r+0x22>
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	6053      	str	r3, [r2, #4]
 8003fa6:	4408      	add	r0, r1
 8003fa8:	6010      	str	r0, [r2, #0]
 8003faa:	e7da      	b.n	8003f62 <_free_r+0x22>
 8003fac:	d902      	bls.n	8003fb4 <_free_r+0x74>
 8003fae:	230c      	movs	r3, #12
 8003fb0:	602b      	str	r3, [r5, #0]
 8003fb2:	e7d6      	b.n	8003f62 <_free_r+0x22>
 8003fb4:	6820      	ldr	r0, [r4, #0]
 8003fb6:	1821      	adds	r1, r4, r0
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	bf04      	itt	eq
 8003fbc:	6819      	ldreq	r1, [r3, #0]
 8003fbe:	685b      	ldreq	r3, [r3, #4]
 8003fc0:	6063      	str	r3, [r4, #4]
 8003fc2:	bf04      	itt	eq
 8003fc4:	1809      	addeq	r1, r1, r0
 8003fc6:	6021      	streq	r1, [r4, #0]
 8003fc8:	6054      	str	r4, [r2, #4]
 8003fca:	e7ca      	b.n	8003f62 <_free_r+0x22>
 8003fcc:	bd38      	pop	{r3, r4, r5, pc}
 8003fce:	bf00      	nop
 8003fd0:	200051f8 	.word	0x200051f8

08003fd4 <sbrk_aligned>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8004014 <sbrk_aligned+0x40>)
 8003fd8:	460c      	mov	r4, r1
 8003fda:	6831      	ldr	r1, [r6, #0]
 8003fdc:	4605      	mov	r5, r0
 8003fde:	b911      	cbnz	r1, 8003fe6 <sbrk_aligned+0x12>
 8003fe0:	f000 fba6 	bl	8004730 <_sbrk_r>
 8003fe4:	6030      	str	r0, [r6, #0]
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	4628      	mov	r0, r5
 8003fea:	f000 fba1 	bl	8004730 <_sbrk_r>
 8003fee:	1c43      	adds	r3, r0, #1
 8003ff0:	d103      	bne.n	8003ffa <sbrk_aligned+0x26>
 8003ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
 8003ffa:	1cc4      	adds	r4, r0, #3
 8003ffc:	f024 0403 	bic.w	r4, r4, #3
 8004000:	42a0      	cmp	r0, r4
 8004002:	d0f8      	beq.n	8003ff6 <sbrk_aligned+0x22>
 8004004:	1a21      	subs	r1, r4, r0
 8004006:	4628      	mov	r0, r5
 8004008:	f000 fb92 	bl	8004730 <_sbrk_r>
 800400c:	3001      	adds	r0, #1
 800400e:	d1f2      	bne.n	8003ff6 <sbrk_aligned+0x22>
 8004010:	e7ef      	b.n	8003ff2 <sbrk_aligned+0x1e>
 8004012:	bf00      	nop
 8004014:	200051f4 	.word	0x200051f4

08004018 <_malloc_r>:
 8004018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800401c:	1ccd      	adds	r5, r1, #3
 800401e:	f025 0503 	bic.w	r5, r5, #3
 8004022:	3508      	adds	r5, #8
 8004024:	2d0c      	cmp	r5, #12
 8004026:	bf38      	it	cc
 8004028:	250c      	movcc	r5, #12
 800402a:	2d00      	cmp	r5, #0
 800402c:	4606      	mov	r6, r0
 800402e:	db01      	blt.n	8004034 <_malloc_r+0x1c>
 8004030:	42a9      	cmp	r1, r5
 8004032:	d904      	bls.n	800403e <_malloc_r+0x26>
 8004034:	230c      	movs	r3, #12
 8004036:	6033      	str	r3, [r6, #0]
 8004038:	2000      	movs	r0, #0
 800403a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800403e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004114 <_malloc_r+0xfc>
 8004042:	f000 f869 	bl	8004118 <__malloc_lock>
 8004046:	f8d8 3000 	ldr.w	r3, [r8]
 800404a:	461c      	mov	r4, r3
 800404c:	bb44      	cbnz	r4, 80040a0 <_malloc_r+0x88>
 800404e:	4629      	mov	r1, r5
 8004050:	4630      	mov	r0, r6
 8004052:	f7ff ffbf 	bl	8003fd4 <sbrk_aligned>
 8004056:	1c43      	adds	r3, r0, #1
 8004058:	4604      	mov	r4, r0
 800405a:	d158      	bne.n	800410e <_malloc_r+0xf6>
 800405c:	f8d8 4000 	ldr.w	r4, [r8]
 8004060:	4627      	mov	r7, r4
 8004062:	2f00      	cmp	r7, #0
 8004064:	d143      	bne.n	80040ee <_malloc_r+0xd6>
 8004066:	2c00      	cmp	r4, #0
 8004068:	d04b      	beq.n	8004102 <_malloc_r+0xea>
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	4639      	mov	r1, r7
 800406e:	4630      	mov	r0, r6
 8004070:	eb04 0903 	add.w	r9, r4, r3
 8004074:	f000 fb5c 	bl	8004730 <_sbrk_r>
 8004078:	4581      	cmp	r9, r0
 800407a:	d142      	bne.n	8004102 <_malloc_r+0xea>
 800407c:	6821      	ldr	r1, [r4, #0]
 800407e:	1a6d      	subs	r5, r5, r1
 8004080:	4629      	mov	r1, r5
 8004082:	4630      	mov	r0, r6
 8004084:	f7ff ffa6 	bl	8003fd4 <sbrk_aligned>
 8004088:	3001      	adds	r0, #1
 800408a:	d03a      	beq.n	8004102 <_malloc_r+0xea>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	442b      	add	r3, r5
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	f8d8 3000 	ldr.w	r3, [r8]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	bb62      	cbnz	r2, 80040f4 <_malloc_r+0xdc>
 800409a:	f8c8 7000 	str.w	r7, [r8]
 800409e:	e00f      	b.n	80040c0 <_malloc_r+0xa8>
 80040a0:	6822      	ldr	r2, [r4, #0]
 80040a2:	1b52      	subs	r2, r2, r5
 80040a4:	d420      	bmi.n	80040e8 <_malloc_r+0xd0>
 80040a6:	2a0b      	cmp	r2, #11
 80040a8:	d917      	bls.n	80040da <_malloc_r+0xc2>
 80040aa:	1961      	adds	r1, r4, r5
 80040ac:	42a3      	cmp	r3, r4
 80040ae:	6025      	str	r5, [r4, #0]
 80040b0:	bf18      	it	ne
 80040b2:	6059      	strne	r1, [r3, #4]
 80040b4:	6863      	ldr	r3, [r4, #4]
 80040b6:	bf08      	it	eq
 80040b8:	f8c8 1000 	streq.w	r1, [r8]
 80040bc:	5162      	str	r2, [r4, r5]
 80040be:	604b      	str	r3, [r1, #4]
 80040c0:	4630      	mov	r0, r6
 80040c2:	f000 f82f 	bl	8004124 <__malloc_unlock>
 80040c6:	f104 000b 	add.w	r0, r4, #11
 80040ca:	1d23      	adds	r3, r4, #4
 80040cc:	f020 0007 	bic.w	r0, r0, #7
 80040d0:	1ac2      	subs	r2, r0, r3
 80040d2:	bf1c      	itt	ne
 80040d4:	1a1b      	subne	r3, r3, r0
 80040d6:	50a3      	strne	r3, [r4, r2]
 80040d8:	e7af      	b.n	800403a <_malloc_r+0x22>
 80040da:	6862      	ldr	r2, [r4, #4]
 80040dc:	42a3      	cmp	r3, r4
 80040de:	bf0c      	ite	eq
 80040e0:	f8c8 2000 	streq.w	r2, [r8]
 80040e4:	605a      	strne	r2, [r3, #4]
 80040e6:	e7eb      	b.n	80040c0 <_malloc_r+0xa8>
 80040e8:	4623      	mov	r3, r4
 80040ea:	6864      	ldr	r4, [r4, #4]
 80040ec:	e7ae      	b.n	800404c <_malloc_r+0x34>
 80040ee:	463c      	mov	r4, r7
 80040f0:	687f      	ldr	r7, [r7, #4]
 80040f2:	e7b6      	b.n	8004062 <_malloc_r+0x4a>
 80040f4:	461a      	mov	r2, r3
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	d1fb      	bne.n	80040f4 <_malloc_r+0xdc>
 80040fc:	2300      	movs	r3, #0
 80040fe:	6053      	str	r3, [r2, #4]
 8004100:	e7de      	b.n	80040c0 <_malloc_r+0xa8>
 8004102:	230c      	movs	r3, #12
 8004104:	6033      	str	r3, [r6, #0]
 8004106:	4630      	mov	r0, r6
 8004108:	f000 f80c 	bl	8004124 <__malloc_unlock>
 800410c:	e794      	b.n	8004038 <_malloc_r+0x20>
 800410e:	6005      	str	r5, [r0, #0]
 8004110:	e7d6      	b.n	80040c0 <_malloc_r+0xa8>
 8004112:	bf00      	nop
 8004114:	200051f8 	.word	0x200051f8

08004118 <__malloc_lock>:
 8004118:	4801      	ldr	r0, [pc, #4]	@ (8004120 <__malloc_lock+0x8>)
 800411a:	f7ff bf0f 	b.w	8003f3c <__retarget_lock_acquire_recursive>
 800411e:	bf00      	nop
 8004120:	200051f0 	.word	0x200051f0

08004124 <__malloc_unlock>:
 8004124:	4801      	ldr	r0, [pc, #4]	@ (800412c <__malloc_unlock+0x8>)
 8004126:	f7ff bf0a 	b.w	8003f3e <__retarget_lock_release_recursive>
 800412a:	bf00      	nop
 800412c:	200051f0 	.word	0x200051f0

08004130 <__ssputs_r>:
 8004130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004134:	688e      	ldr	r6, [r1, #8]
 8004136:	461f      	mov	r7, r3
 8004138:	42be      	cmp	r6, r7
 800413a:	680b      	ldr	r3, [r1, #0]
 800413c:	4682      	mov	sl, r0
 800413e:	460c      	mov	r4, r1
 8004140:	4690      	mov	r8, r2
 8004142:	d82d      	bhi.n	80041a0 <__ssputs_r+0x70>
 8004144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004148:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800414c:	d026      	beq.n	800419c <__ssputs_r+0x6c>
 800414e:	6965      	ldr	r5, [r4, #20]
 8004150:	6909      	ldr	r1, [r1, #16]
 8004152:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004156:	eba3 0901 	sub.w	r9, r3, r1
 800415a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800415e:	1c7b      	adds	r3, r7, #1
 8004160:	444b      	add	r3, r9
 8004162:	106d      	asrs	r5, r5, #1
 8004164:	429d      	cmp	r5, r3
 8004166:	bf38      	it	cc
 8004168:	461d      	movcc	r5, r3
 800416a:	0553      	lsls	r3, r2, #21
 800416c:	d527      	bpl.n	80041be <__ssputs_r+0x8e>
 800416e:	4629      	mov	r1, r5
 8004170:	f7ff ff52 	bl	8004018 <_malloc_r>
 8004174:	4606      	mov	r6, r0
 8004176:	b360      	cbz	r0, 80041d2 <__ssputs_r+0xa2>
 8004178:	6921      	ldr	r1, [r4, #16]
 800417a:	464a      	mov	r2, r9
 800417c:	f000 fae8 	bl	8004750 <memcpy>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	6126      	str	r6, [r4, #16]
 800418e:	6165      	str	r5, [r4, #20]
 8004190:	444e      	add	r6, r9
 8004192:	eba5 0509 	sub.w	r5, r5, r9
 8004196:	6026      	str	r6, [r4, #0]
 8004198:	60a5      	str	r5, [r4, #8]
 800419a:	463e      	mov	r6, r7
 800419c:	42be      	cmp	r6, r7
 800419e:	d900      	bls.n	80041a2 <__ssputs_r+0x72>
 80041a0:	463e      	mov	r6, r7
 80041a2:	6820      	ldr	r0, [r4, #0]
 80041a4:	4632      	mov	r2, r6
 80041a6:	4641      	mov	r1, r8
 80041a8:	f000 faa8 	bl	80046fc <memmove>
 80041ac:	68a3      	ldr	r3, [r4, #8]
 80041ae:	1b9b      	subs	r3, r3, r6
 80041b0:	60a3      	str	r3, [r4, #8]
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	4433      	add	r3, r6
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	2000      	movs	r0, #0
 80041ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041be:	462a      	mov	r2, r5
 80041c0:	f000 fad4 	bl	800476c <_realloc_r>
 80041c4:	4606      	mov	r6, r0
 80041c6:	2800      	cmp	r0, #0
 80041c8:	d1e0      	bne.n	800418c <__ssputs_r+0x5c>
 80041ca:	6921      	ldr	r1, [r4, #16]
 80041cc:	4650      	mov	r0, sl
 80041ce:	f7ff feb7 	bl	8003f40 <_free_r>
 80041d2:	230c      	movs	r3, #12
 80041d4:	f8ca 3000 	str.w	r3, [sl]
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041de:	81a3      	strh	r3, [r4, #12]
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	e7e9      	b.n	80041ba <__ssputs_r+0x8a>
	...

080041e8 <_svfiprintf_r>:
 80041e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ec:	4698      	mov	r8, r3
 80041ee:	898b      	ldrh	r3, [r1, #12]
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	b09d      	sub	sp, #116	@ 0x74
 80041f4:	4607      	mov	r7, r0
 80041f6:	460d      	mov	r5, r1
 80041f8:	4614      	mov	r4, r2
 80041fa:	d510      	bpl.n	800421e <_svfiprintf_r+0x36>
 80041fc:	690b      	ldr	r3, [r1, #16]
 80041fe:	b973      	cbnz	r3, 800421e <_svfiprintf_r+0x36>
 8004200:	2140      	movs	r1, #64	@ 0x40
 8004202:	f7ff ff09 	bl	8004018 <_malloc_r>
 8004206:	6028      	str	r0, [r5, #0]
 8004208:	6128      	str	r0, [r5, #16]
 800420a:	b930      	cbnz	r0, 800421a <_svfiprintf_r+0x32>
 800420c:	230c      	movs	r3, #12
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	b01d      	add	sp, #116	@ 0x74
 8004216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421a:	2340      	movs	r3, #64	@ 0x40
 800421c:	616b      	str	r3, [r5, #20]
 800421e:	2300      	movs	r3, #0
 8004220:	9309      	str	r3, [sp, #36]	@ 0x24
 8004222:	2320      	movs	r3, #32
 8004224:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004228:	f8cd 800c 	str.w	r8, [sp, #12]
 800422c:	2330      	movs	r3, #48	@ 0x30
 800422e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80043cc <_svfiprintf_r+0x1e4>
 8004232:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004236:	f04f 0901 	mov.w	r9, #1
 800423a:	4623      	mov	r3, r4
 800423c:	469a      	mov	sl, r3
 800423e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004242:	b10a      	cbz	r2, 8004248 <_svfiprintf_r+0x60>
 8004244:	2a25      	cmp	r2, #37	@ 0x25
 8004246:	d1f9      	bne.n	800423c <_svfiprintf_r+0x54>
 8004248:	ebba 0b04 	subs.w	fp, sl, r4
 800424c:	d00b      	beq.n	8004266 <_svfiprintf_r+0x7e>
 800424e:	465b      	mov	r3, fp
 8004250:	4622      	mov	r2, r4
 8004252:	4629      	mov	r1, r5
 8004254:	4638      	mov	r0, r7
 8004256:	f7ff ff6b 	bl	8004130 <__ssputs_r>
 800425a:	3001      	adds	r0, #1
 800425c:	f000 80a7 	beq.w	80043ae <_svfiprintf_r+0x1c6>
 8004260:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004262:	445a      	add	r2, fp
 8004264:	9209      	str	r2, [sp, #36]	@ 0x24
 8004266:	f89a 3000 	ldrb.w	r3, [sl]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 809f 	beq.w	80043ae <_svfiprintf_r+0x1c6>
 8004270:	2300      	movs	r3, #0
 8004272:	f04f 32ff 	mov.w	r2, #4294967295
 8004276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800427a:	f10a 0a01 	add.w	sl, sl, #1
 800427e:	9304      	str	r3, [sp, #16]
 8004280:	9307      	str	r3, [sp, #28]
 8004282:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004286:	931a      	str	r3, [sp, #104]	@ 0x68
 8004288:	4654      	mov	r4, sl
 800428a:	2205      	movs	r2, #5
 800428c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004290:	484e      	ldr	r0, [pc, #312]	@ (80043cc <_svfiprintf_r+0x1e4>)
 8004292:	f7fb fffd 	bl	8000290 <memchr>
 8004296:	9a04      	ldr	r2, [sp, #16]
 8004298:	b9d8      	cbnz	r0, 80042d2 <_svfiprintf_r+0xea>
 800429a:	06d0      	lsls	r0, r2, #27
 800429c:	bf44      	itt	mi
 800429e:	2320      	movmi	r3, #32
 80042a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042a4:	0711      	lsls	r1, r2, #28
 80042a6:	bf44      	itt	mi
 80042a8:	232b      	movmi	r3, #43	@ 0x2b
 80042aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042ae:	f89a 3000 	ldrb.w	r3, [sl]
 80042b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80042b4:	d015      	beq.n	80042e2 <_svfiprintf_r+0xfa>
 80042b6:	9a07      	ldr	r2, [sp, #28]
 80042b8:	4654      	mov	r4, sl
 80042ba:	2000      	movs	r0, #0
 80042bc:	f04f 0c0a 	mov.w	ip, #10
 80042c0:	4621      	mov	r1, r4
 80042c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042c6:	3b30      	subs	r3, #48	@ 0x30
 80042c8:	2b09      	cmp	r3, #9
 80042ca:	d94b      	bls.n	8004364 <_svfiprintf_r+0x17c>
 80042cc:	b1b0      	cbz	r0, 80042fc <_svfiprintf_r+0x114>
 80042ce:	9207      	str	r2, [sp, #28]
 80042d0:	e014      	b.n	80042fc <_svfiprintf_r+0x114>
 80042d2:	eba0 0308 	sub.w	r3, r0, r8
 80042d6:	fa09 f303 	lsl.w	r3, r9, r3
 80042da:	4313      	orrs	r3, r2
 80042dc:	9304      	str	r3, [sp, #16]
 80042de:	46a2      	mov	sl, r4
 80042e0:	e7d2      	b.n	8004288 <_svfiprintf_r+0xa0>
 80042e2:	9b03      	ldr	r3, [sp, #12]
 80042e4:	1d19      	adds	r1, r3, #4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	9103      	str	r1, [sp, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bfbb      	ittet	lt
 80042ee:	425b      	neglt	r3, r3
 80042f0:	f042 0202 	orrlt.w	r2, r2, #2
 80042f4:	9307      	strge	r3, [sp, #28]
 80042f6:	9307      	strlt	r3, [sp, #28]
 80042f8:	bfb8      	it	lt
 80042fa:	9204      	strlt	r2, [sp, #16]
 80042fc:	7823      	ldrb	r3, [r4, #0]
 80042fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004300:	d10a      	bne.n	8004318 <_svfiprintf_r+0x130>
 8004302:	7863      	ldrb	r3, [r4, #1]
 8004304:	2b2a      	cmp	r3, #42	@ 0x2a
 8004306:	d132      	bne.n	800436e <_svfiprintf_r+0x186>
 8004308:	9b03      	ldr	r3, [sp, #12]
 800430a:	1d1a      	adds	r2, r3, #4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	9203      	str	r2, [sp, #12]
 8004310:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004314:	3402      	adds	r4, #2
 8004316:	9305      	str	r3, [sp, #20]
 8004318:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043dc <_svfiprintf_r+0x1f4>
 800431c:	7821      	ldrb	r1, [r4, #0]
 800431e:	2203      	movs	r2, #3
 8004320:	4650      	mov	r0, sl
 8004322:	f7fb ffb5 	bl	8000290 <memchr>
 8004326:	b138      	cbz	r0, 8004338 <_svfiprintf_r+0x150>
 8004328:	9b04      	ldr	r3, [sp, #16]
 800432a:	eba0 000a 	sub.w	r0, r0, sl
 800432e:	2240      	movs	r2, #64	@ 0x40
 8004330:	4082      	lsls	r2, r0
 8004332:	4313      	orrs	r3, r2
 8004334:	3401      	adds	r4, #1
 8004336:	9304      	str	r3, [sp, #16]
 8004338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800433c:	4824      	ldr	r0, [pc, #144]	@ (80043d0 <_svfiprintf_r+0x1e8>)
 800433e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004342:	2206      	movs	r2, #6
 8004344:	f7fb ffa4 	bl	8000290 <memchr>
 8004348:	2800      	cmp	r0, #0
 800434a:	d036      	beq.n	80043ba <_svfiprintf_r+0x1d2>
 800434c:	4b21      	ldr	r3, [pc, #132]	@ (80043d4 <_svfiprintf_r+0x1ec>)
 800434e:	bb1b      	cbnz	r3, 8004398 <_svfiprintf_r+0x1b0>
 8004350:	9b03      	ldr	r3, [sp, #12]
 8004352:	3307      	adds	r3, #7
 8004354:	f023 0307 	bic.w	r3, r3, #7
 8004358:	3308      	adds	r3, #8
 800435a:	9303      	str	r3, [sp, #12]
 800435c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800435e:	4433      	add	r3, r6
 8004360:	9309      	str	r3, [sp, #36]	@ 0x24
 8004362:	e76a      	b.n	800423a <_svfiprintf_r+0x52>
 8004364:	fb0c 3202 	mla	r2, ip, r2, r3
 8004368:	460c      	mov	r4, r1
 800436a:	2001      	movs	r0, #1
 800436c:	e7a8      	b.n	80042c0 <_svfiprintf_r+0xd8>
 800436e:	2300      	movs	r3, #0
 8004370:	3401      	adds	r4, #1
 8004372:	9305      	str	r3, [sp, #20]
 8004374:	4619      	mov	r1, r3
 8004376:	f04f 0c0a 	mov.w	ip, #10
 800437a:	4620      	mov	r0, r4
 800437c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004380:	3a30      	subs	r2, #48	@ 0x30
 8004382:	2a09      	cmp	r2, #9
 8004384:	d903      	bls.n	800438e <_svfiprintf_r+0x1a6>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0c6      	beq.n	8004318 <_svfiprintf_r+0x130>
 800438a:	9105      	str	r1, [sp, #20]
 800438c:	e7c4      	b.n	8004318 <_svfiprintf_r+0x130>
 800438e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004392:	4604      	mov	r4, r0
 8004394:	2301      	movs	r3, #1
 8004396:	e7f0      	b.n	800437a <_svfiprintf_r+0x192>
 8004398:	ab03      	add	r3, sp, #12
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	462a      	mov	r2, r5
 800439e:	4b0e      	ldr	r3, [pc, #56]	@ (80043d8 <_svfiprintf_r+0x1f0>)
 80043a0:	a904      	add	r1, sp, #16
 80043a2:	4638      	mov	r0, r7
 80043a4:	f3af 8000 	nop.w
 80043a8:	1c42      	adds	r2, r0, #1
 80043aa:	4606      	mov	r6, r0
 80043ac:	d1d6      	bne.n	800435c <_svfiprintf_r+0x174>
 80043ae:	89ab      	ldrh	r3, [r5, #12]
 80043b0:	065b      	lsls	r3, r3, #25
 80043b2:	f53f af2d 	bmi.w	8004210 <_svfiprintf_r+0x28>
 80043b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043b8:	e72c      	b.n	8004214 <_svfiprintf_r+0x2c>
 80043ba:	ab03      	add	r3, sp, #12
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	462a      	mov	r2, r5
 80043c0:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <_svfiprintf_r+0x1f0>)
 80043c2:	a904      	add	r1, sp, #16
 80043c4:	4638      	mov	r0, r7
 80043c6:	f000 f879 	bl	80044bc <_printf_i>
 80043ca:	e7ed      	b.n	80043a8 <_svfiprintf_r+0x1c0>
 80043cc:	08017f84 	.word	0x08017f84
 80043d0:	08017f8e 	.word	0x08017f8e
 80043d4:	00000000 	.word	0x00000000
 80043d8:	08004131 	.word	0x08004131
 80043dc:	08017f8a 	.word	0x08017f8a

080043e0 <_printf_common>:
 80043e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e4:	4616      	mov	r6, r2
 80043e6:	4698      	mov	r8, r3
 80043e8:	688a      	ldr	r2, [r1, #8]
 80043ea:	690b      	ldr	r3, [r1, #16]
 80043ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	bfb8      	it	lt
 80043f4:	4613      	movlt	r3, r2
 80043f6:	6033      	str	r3, [r6, #0]
 80043f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043fc:	4607      	mov	r7, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	b10a      	cbz	r2, 8004406 <_printf_common+0x26>
 8004402:	3301      	adds	r3, #1
 8004404:	6033      	str	r3, [r6, #0]
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	0699      	lsls	r1, r3, #26
 800440a:	bf42      	ittt	mi
 800440c:	6833      	ldrmi	r3, [r6, #0]
 800440e:	3302      	addmi	r3, #2
 8004410:	6033      	strmi	r3, [r6, #0]
 8004412:	6825      	ldr	r5, [r4, #0]
 8004414:	f015 0506 	ands.w	r5, r5, #6
 8004418:	d106      	bne.n	8004428 <_printf_common+0x48>
 800441a:	f104 0a19 	add.w	sl, r4, #25
 800441e:	68e3      	ldr	r3, [r4, #12]
 8004420:	6832      	ldr	r2, [r6, #0]
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	42ab      	cmp	r3, r5
 8004426:	dc26      	bgt.n	8004476 <_printf_common+0x96>
 8004428:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800442c:	6822      	ldr	r2, [r4, #0]
 800442e:	3b00      	subs	r3, #0
 8004430:	bf18      	it	ne
 8004432:	2301      	movne	r3, #1
 8004434:	0692      	lsls	r2, r2, #26
 8004436:	d42b      	bmi.n	8004490 <_printf_common+0xb0>
 8004438:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800443c:	4641      	mov	r1, r8
 800443e:	4638      	mov	r0, r7
 8004440:	47c8      	blx	r9
 8004442:	3001      	adds	r0, #1
 8004444:	d01e      	beq.n	8004484 <_printf_common+0xa4>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	6922      	ldr	r2, [r4, #16]
 800444a:	f003 0306 	and.w	r3, r3, #6
 800444e:	2b04      	cmp	r3, #4
 8004450:	bf02      	ittt	eq
 8004452:	68e5      	ldreq	r5, [r4, #12]
 8004454:	6833      	ldreq	r3, [r6, #0]
 8004456:	1aed      	subeq	r5, r5, r3
 8004458:	68a3      	ldr	r3, [r4, #8]
 800445a:	bf0c      	ite	eq
 800445c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004460:	2500      	movne	r5, #0
 8004462:	4293      	cmp	r3, r2
 8004464:	bfc4      	itt	gt
 8004466:	1a9b      	subgt	r3, r3, r2
 8004468:	18ed      	addgt	r5, r5, r3
 800446a:	2600      	movs	r6, #0
 800446c:	341a      	adds	r4, #26
 800446e:	42b5      	cmp	r5, r6
 8004470:	d11a      	bne.n	80044a8 <_printf_common+0xc8>
 8004472:	2000      	movs	r0, #0
 8004474:	e008      	b.n	8004488 <_printf_common+0xa8>
 8004476:	2301      	movs	r3, #1
 8004478:	4652      	mov	r2, sl
 800447a:	4641      	mov	r1, r8
 800447c:	4638      	mov	r0, r7
 800447e:	47c8      	blx	r9
 8004480:	3001      	adds	r0, #1
 8004482:	d103      	bne.n	800448c <_printf_common+0xac>
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448c:	3501      	adds	r5, #1
 800448e:	e7c6      	b.n	800441e <_printf_common+0x3e>
 8004490:	18e1      	adds	r1, r4, r3
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	2030      	movs	r0, #48	@ 0x30
 8004496:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800449a:	4422      	add	r2, r4
 800449c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044a4:	3302      	adds	r3, #2
 80044a6:	e7c7      	b.n	8004438 <_printf_common+0x58>
 80044a8:	2301      	movs	r3, #1
 80044aa:	4622      	mov	r2, r4
 80044ac:	4641      	mov	r1, r8
 80044ae:	4638      	mov	r0, r7
 80044b0:	47c8      	blx	r9
 80044b2:	3001      	adds	r0, #1
 80044b4:	d0e6      	beq.n	8004484 <_printf_common+0xa4>
 80044b6:	3601      	adds	r6, #1
 80044b8:	e7d9      	b.n	800446e <_printf_common+0x8e>
	...

080044bc <_printf_i>:
 80044bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044c0:	7e0f      	ldrb	r7, [r1, #24]
 80044c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044c4:	2f78      	cmp	r7, #120	@ 0x78
 80044c6:	4691      	mov	r9, r2
 80044c8:	4680      	mov	r8, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	469a      	mov	sl, r3
 80044ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044d2:	d807      	bhi.n	80044e4 <_printf_i+0x28>
 80044d4:	2f62      	cmp	r7, #98	@ 0x62
 80044d6:	d80a      	bhi.n	80044ee <_printf_i+0x32>
 80044d8:	2f00      	cmp	r7, #0
 80044da:	f000 80d2 	beq.w	8004682 <_printf_i+0x1c6>
 80044de:	2f58      	cmp	r7, #88	@ 0x58
 80044e0:	f000 80b9 	beq.w	8004656 <_printf_i+0x19a>
 80044e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044ec:	e03a      	b.n	8004564 <_printf_i+0xa8>
 80044ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044f2:	2b15      	cmp	r3, #21
 80044f4:	d8f6      	bhi.n	80044e4 <_printf_i+0x28>
 80044f6:	a101      	add	r1, pc, #4	@ (adr r1, 80044fc <_printf_i+0x40>)
 80044f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044fc:	08004555 	.word	0x08004555
 8004500:	08004569 	.word	0x08004569
 8004504:	080044e5 	.word	0x080044e5
 8004508:	080044e5 	.word	0x080044e5
 800450c:	080044e5 	.word	0x080044e5
 8004510:	080044e5 	.word	0x080044e5
 8004514:	08004569 	.word	0x08004569
 8004518:	080044e5 	.word	0x080044e5
 800451c:	080044e5 	.word	0x080044e5
 8004520:	080044e5 	.word	0x080044e5
 8004524:	080044e5 	.word	0x080044e5
 8004528:	08004669 	.word	0x08004669
 800452c:	08004593 	.word	0x08004593
 8004530:	08004623 	.word	0x08004623
 8004534:	080044e5 	.word	0x080044e5
 8004538:	080044e5 	.word	0x080044e5
 800453c:	0800468b 	.word	0x0800468b
 8004540:	080044e5 	.word	0x080044e5
 8004544:	08004593 	.word	0x08004593
 8004548:	080044e5 	.word	0x080044e5
 800454c:	080044e5 	.word	0x080044e5
 8004550:	0800462b 	.word	0x0800462b
 8004554:	6833      	ldr	r3, [r6, #0]
 8004556:	1d1a      	adds	r2, r3, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6032      	str	r2, [r6, #0]
 800455c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004560:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004564:	2301      	movs	r3, #1
 8004566:	e09d      	b.n	80046a4 <_printf_i+0x1e8>
 8004568:	6833      	ldr	r3, [r6, #0]
 800456a:	6820      	ldr	r0, [r4, #0]
 800456c:	1d19      	adds	r1, r3, #4
 800456e:	6031      	str	r1, [r6, #0]
 8004570:	0606      	lsls	r6, r0, #24
 8004572:	d501      	bpl.n	8004578 <_printf_i+0xbc>
 8004574:	681d      	ldr	r5, [r3, #0]
 8004576:	e003      	b.n	8004580 <_printf_i+0xc4>
 8004578:	0645      	lsls	r5, r0, #25
 800457a:	d5fb      	bpl.n	8004574 <_printf_i+0xb8>
 800457c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004580:	2d00      	cmp	r5, #0
 8004582:	da03      	bge.n	800458c <_printf_i+0xd0>
 8004584:	232d      	movs	r3, #45	@ 0x2d
 8004586:	426d      	negs	r5, r5
 8004588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800458c:	4859      	ldr	r0, [pc, #356]	@ (80046f4 <_printf_i+0x238>)
 800458e:	230a      	movs	r3, #10
 8004590:	e011      	b.n	80045b6 <_printf_i+0xfa>
 8004592:	6821      	ldr	r1, [r4, #0]
 8004594:	6833      	ldr	r3, [r6, #0]
 8004596:	0608      	lsls	r0, r1, #24
 8004598:	f853 5b04 	ldr.w	r5, [r3], #4
 800459c:	d402      	bmi.n	80045a4 <_printf_i+0xe8>
 800459e:	0649      	lsls	r1, r1, #25
 80045a0:	bf48      	it	mi
 80045a2:	b2ad      	uxthmi	r5, r5
 80045a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80045a6:	4853      	ldr	r0, [pc, #332]	@ (80046f4 <_printf_i+0x238>)
 80045a8:	6033      	str	r3, [r6, #0]
 80045aa:	bf14      	ite	ne
 80045ac:	230a      	movne	r3, #10
 80045ae:	2308      	moveq	r3, #8
 80045b0:	2100      	movs	r1, #0
 80045b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045b6:	6866      	ldr	r6, [r4, #4]
 80045b8:	60a6      	str	r6, [r4, #8]
 80045ba:	2e00      	cmp	r6, #0
 80045bc:	bfa2      	ittt	ge
 80045be:	6821      	ldrge	r1, [r4, #0]
 80045c0:	f021 0104 	bicge.w	r1, r1, #4
 80045c4:	6021      	strge	r1, [r4, #0]
 80045c6:	b90d      	cbnz	r5, 80045cc <_printf_i+0x110>
 80045c8:	2e00      	cmp	r6, #0
 80045ca:	d04b      	beq.n	8004664 <_printf_i+0x1a8>
 80045cc:	4616      	mov	r6, r2
 80045ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80045d2:	fb03 5711 	mls	r7, r3, r1, r5
 80045d6:	5dc7      	ldrb	r7, [r0, r7]
 80045d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045dc:	462f      	mov	r7, r5
 80045de:	42bb      	cmp	r3, r7
 80045e0:	460d      	mov	r5, r1
 80045e2:	d9f4      	bls.n	80045ce <_printf_i+0x112>
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d10b      	bne.n	8004600 <_printf_i+0x144>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	07df      	lsls	r7, r3, #31
 80045ec:	d508      	bpl.n	8004600 <_printf_i+0x144>
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	6861      	ldr	r1, [r4, #4]
 80045f2:	4299      	cmp	r1, r3
 80045f4:	bfde      	ittt	le
 80045f6:	2330      	movle	r3, #48	@ 0x30
 80045f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004600:	1b92      	subs	r2, r2, r6
 8004602:	6122      	str	r2, [r4, #16]
 8004604:	f8cd a000 	str.w	sl, [sp]
 8004608:	464b      	mov	r3, r9
 800460a:	aa03      	add	r2, sp, #12
 800460c:	4621      	mov	r1, r4
 800460e:	4640      	mov	r0, r8
 8004610:	f7ff fee6 	bl	80043e0 <_printf_common>
 8004614:	3001      	adds	r0, #1
 8004616:	d14a      	bne.n	80046ae <_printf_i+0x1f2>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	b004      	add	sp, #16
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	f043 0320 	orr.w	r3, r3, #32
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	4833      	ldr	r0, [pc, #204]	@ (80046f8 <_printf_i+0x23c>)
 800462c:	2778      	movs	r7, #120	@ 0x78
 800462e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	6831      	ldr	r1, [r6, #0]
 8004636:	061f      	lsls	r7, r3, #24
 8004638:	f851 5b04 	ldr.w	r5, [r1], #4
 800463c:	d402      	bmi.n	8004644 <_printf_i+0x188>
 800463e:	065f      	lsls	r7, r3, #25
 8004640:	bf48      	it	mi
 8004642:	b2ad      	uxthmi	r5, r5
 8004644:	6031      	str	r1, [r6, #0]
 8004646:	07d9      	lsls	r1, r3, #31
 8004648:	bf44      	itt	mi
 800464a:	f043 0320 	orrmi.w	r3, r3, #32
 800464e:	6023      	strmi	r3, [r4, #0]
 8004650:	b11d      	cbz	r5, 800465a <_printf_i+0x19e>
 8004652:	2310      	movs	r3, #16
 8004654:	e7ac      	b.n	80045b0 <_printf_i+0xf4>
 8004656:	4827      	ldr	r0, [pc, #156]	@ (80046f4 <_printf_i+0x238>)
 8004658:	e7e9      	b.n	800462e <_printf_i+0x172>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	f023 0320 	bic.w	r3, r3, #32
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	e7f6      	b.n	8004652 <_printf_i+0x196>
 8004664:	4616      	mov	r6, r2
 8004666:	e7bd      	b.n	80045e4 <_printf_i+0x128>
 8004668:	6833      	ldr	r3, [r6, #0]
 800466a:	6825      	ldr	r5, [r4, #0]
 800466c:	6961      	ldr	r1, [r4, #20]
 800466e:	1d18      	adds	r0, r3, #4
 8004670:	6030      	str	r0, [r6, #0]
 8004672:	062e      	lsls	r6, r5, #24
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	d501      	bpl.n	800467c <_printf_i+0x1c0>
 8004678:	6019      	str	r1, [r3, #0]
 800467a:	e002      	b.n	8004682 <_printf_i+0x1c6>
 800467c:	0668      	lsls	r0, r5, #25
 800467e:	d5fb      	bpl.n	8004678 <_printf_i+0x1bc>
 8004680:	8019      	strh	r1, [r3, #0]
 8004682:	2300      	movs	r3, #0
 8004684:	6123      	str	r3, [r4, #16]
 8004686:	4616      	mov	r6, r2
 8004688:	e7bc      	b.n	8004604 <_printf_i+0x148>
 800468a:	6833      	ldr	r3, [r6, #0]
 800468c:	1d1a      	adds	r2, r3, #4
 800468e:	6032      	str	r2, [r6, #0]
 8004690:	681e      	ldr	r6, [r3, #0]
 8004692:	6862      	ldr	r2, [r4, #4]
 8004694:	2100      	movs	r1, #0
 8004696:	4630      	mov	r0, r6
 8004698:	f7fb fdfa 	bl	8000290 <memchr>
 800469c:	b108      	cbz	r0, 80046a2 <_printf_i+0x1e6>
 800469e:	1b80      	subs	r0, r0, r6
 80046a0:	6060      	str	r0, [r4, #4]
 80046a2:	6863      	ldr	r3, [r4, #4]
 80046a4:	6123      	str	r3, [r4, #16]
 80046a6:	2300      	movs	r3, #0
 80046a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046ac:	e7aa      	b.n	8004604 <_printf_i+0x148>
 80046ae:	6923      	ldr	r3, [r4, #16]
 80046b0:	4632      	mov	r2, r6
 80046b2:	4649      	mov	r1, r9
 80046b4:	4640      	mov	r0, r8
 80046b6:	47d0      	blx	sl
 80046b8:	3001      	adds	r0, #1
 80046ba:	d0ad      	beq.n	8004618 <_printf_i+0x15c>
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	079b      	lsls	r3, r3, #30
 80046c0:	d413      	bmi.n	80046ea <_printf_i+0x22e>
 80046c2:	68e0      	ldr	r0, [r4, #12]
 80046c4:	9b03      	ldr	r3, [sp, #12]
 80046c6:	4298      	cmp	r0, r3
 80046c8:	bfb8      	it	lt
 80046ca:	4618      	movlt	r0, r3
 80046cc:	e7a6      	b.n	800461c <_printf_i+0x160>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4632      	mov	r2, r6
 80046d2:	4649      	mov	r1, r9
 80046d4:	4640      	mov	r0, r8
 80046d6:	47d0      	blx	sl
 80046d8:	3001      	adds	r0, #1
 80046da:	d09d      	beq.n	8004618 <_printf_i+0x15c>
 80046dc:	3501      	adds	r5, #1
 80046de:	68e3      	ldr	r3, [r4, #12]
 80046e0:	9903      	ldr	r1, [sp, #12]
 80046e2:	1a5b      	subs	r3, r3, r1
 80046e4:	42ab      	cmp	r3, r5
 80046e6:	dcf2      	bgt.n	80046ce <_printf_i+0x212>
 80046e8:	e7eb      	b.n	80046c2 <_printf_i+0x206>
 80046ea:	2500      	movs	r5, #0
 80046ec:	f104 0619 	add.w	r6, r4, #25
 80046f0:	e7f5      	b.n	80046de <_printf_i+0x222>
 80046f2:	bf00      	nop
 80046f4:	08017f95 	.word	0x08017f95
 80046f8:	08017fa6 	.word	0x08017fa6

080046fc <memmove>:
 80046fc:	4288      	cmp	r0, r1
 80046fe:	b510      	push	{r4, lr}
 8004700:	eb01 0402 	add.w	r4, r1, r2
 8004704:	d902      	bls.n	800470c <memmove+0x10>
 8004706:	4284      	cmp	r4, r0
 8004708:	4623      	mov	r3, r4
 800470a:	d807      	bhi.n	800471c <memmove+0x20>
 800470c:	1e43      	subs	r3, r0, #1
 800470e:	42a1      	cmp	r1, r4
 8004710:	d008      	beq.n	8004724 <memmove+0x28>
 8004712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004716:	f803 2f01 	strb.w	r2, [r3, #1]!
 800471a:	e7f8      	b.n	800470e <memmove+0x12>
 800471c:	4402      	add	r2, r0
 800471e:	4601      	mov	r1, r0
 8004720:	428a      	cmp	r2, r1
 8004722:	d100      	bne.n	8004726 <memmove+0x2a>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800472a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800472e:	e7f7      	b.n	8004720 <memmove+0x24>

08004730 <_sbrk_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d06      	ldr	r5, [pc, #24]	@ (800474c <_sbrk_r+0x1c>)
 8004734:	2300      	movs	r3, #0
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7fd fa7a 	bl	8001c34 <_sbrk>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_sbrk_r+0x1a>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_sbrk_r+0x1a>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	200051ec 	.word	0x200051ec

08004750 <memcpy>:
 8004750:	440a      	add	r2, r1
 8004752:	4291      	cmp	r1, r2
 8004754:	f100 33ff 	add.w	r3, r0, #4294967295
 8004758:	d100      	bne.n	800475c <memcpy+0xc>
 800475a:	4770      	bx	lr
 800475c:	b510      	push	{r4, lr}
 800475e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004766:	4291      	cmp	r1, r2
 8004768:	d1f9      	bne.n	800475e <memcpy+0xe>
 800476a:	bd10      	pop	{r4, pc}

0800476c <_realloc_r>:
 800476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004770:	4680      	mov	r8, r0
 8004772:	4615      	mov	r5, r2
 8004774:	460c      	mov	r4, r1
 8004776:	b921      	cbnz	r1, 8004782 <_realloc_r+0x16>
 8004778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	4611      	mov	r1, r2
 800477e:	f7ff bc4b 	b.w	8004018 <_malloc_r>
 8004782:	b92a      	cbnz	r2, 8004790 <_realloc_r+0x24>
 8004784:	f7ff fbdc 	bl	8003f40 <_free_r>
 8004788:	2400      	movs	r4, #0
 800478a:	4620      	mov	r0, r4
 800478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004790:	f000 f81a 	bl	80047c8 <_malloc_usable_size_r>
 8004794:	4285      	cmp	r5, r0
 8004796:	4606      	mov	r6, r0
 8004798:	d802      	bhi.n	80047a0 <_realloc_r+0x34>
 800479a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800479e:	d8f4      	bhi.n	800478a <_realloc_r+0x1e>
 80047a0:	4629      	mov	r1, r5
 80047a2:	4640      	mov	r0, r8
 80047a4:	f7ff fc38 	bl	8004018 <_malloc_r>
 80047a8:	4607      	mov	r7, r0
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d0ec      	beq.n	8004788 <_realloc_r+0x1c>
 80047ae:	42b5      	cmp	r5, r6
 80047b0:	462a      	mov	r2, r5
 80047b2:	4621      	mov	r1, r4
 80047b4:	bf28      	it	cs
 80047b6:	4632      	movcs	r2, r6
 80047b8:	f7ff ffca 	bl	8004750 <memcpy>
 80047bc:	4621      	mov	r1, r4
 80047be:	4640      	mov	r0, r8
 80047c0:	f7ff fbbe 	bl	8003f40 <_free_r>
 80047c4:	463c      	mov	r4, r7
 80047c6:	e7e0      	b.n	800478a <_realloc_r+0x1e>

080047c8 <_malloc_usable_size_r>:
 80047c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047cc:	1f18      	subs	r0, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfbc      	itt	lt
 80047d2:	580b      	ldrlt	r3, [r1, r0]
 80047d4:	18c0      	addlt	r0, r0, r3
 80047d6:	4770      	bx	lr

080047d8 <sqrt>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	ed2d 8b02 	vpush	{d8}
 80047de:	ec55 4b10 	vmov	r4, r5, d0
 80047e2:	f000 f843 	bl	800486c <__ieee754_sqrt>
 80047e6:	4622      	mov	r2, r4
 80047e8:	462b      	mov	r3, r5
 80047ea:	4620      	mov	r0, r4
 80047ec:	4629      	mov	r1, r5
 80047ee:	eeb0 8a40 	vmov.f32	s16, s0
 80047f2:	eef0 8a60 	vmov.f32	s17, s1
 80047f6:	f7fc f9f1 	bl	8000bdc <__aeabi_dcmpun>
 80047fa:	b990      	cbnz	r0, 8004822 <sqrt+0x4a>
 80047fc:	2200      	movs	r2, #0
 80047fe:	2300      	movs	r3, #0
 8004800:	4620      	mov	r0, r4
 8004802:	4629      	mov	r1, r5
 8004804:	f7fc f9c2 	bl	8000b8c <__aeabi_dcmplt>
 8004808:	b158      	cbz	r0, 8004822 <sqrt+0x4a>
 800480a:	f7ff fb6d 	bl	8003ee8 <__errno>
 800480e:	2321      	movs	r3, #33	@ 0x21
 8004810:	6003      	str	r3, [r0, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	2300      	movs	r3, #0
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	f7fc f86f 	bl	80008fc <__aeabi_ddiv>
 800481e:	ec41 0b18 	vmov	d8, r0, r1
 8004822:	eeb0 0a48 	vmov.f32	s0, s16
 8004826:	eef0 0a68 	vmov.f32	s1, s17
 800482a:	ecbd 8b02 	vpop	{d8}
 800482e:	bd38      	pop	{r3, r4, r5, pc}

08004830 <sqrtf>:
 8004830:	b508      	push	{r3, lr}
 8004832:	ed2d 8b02 	vpush	{d8}
 8004836:	eeb0 8a40 	vmov.f32	s16, s0
 800483a:	f000 f8f1 	bl	8004a20 <__ieee754_sqrtf>
 800483e:	eeb4 8a48 	vcmp.f32	s16, s16
 8004842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004846:	d60c      	bvs.n	8004862 <sqrtf+0x32>
 8004848:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8004868 <sqrtf+0x38>
 800484c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	d505      	bpl.n	8004862 <sqrtf+0x32>
 8004856:	f7ff fb47 	bl	8003ee8 <__errno>
 800485a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800485e:	2321      	movs	r3, #33	@ 0x21
 8004860:	6003      	str	r3, [r0, #0]
 8004862:	ecbd 8b02 	vpop	{d8}
 8004866:	bd08      	pop	{r3, pc}
 8004868:	00000000 	.word	0x00000000

0800486c <__ieee754_sqrt>:
 800486c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004870:	4a68      	ldr	r2, [pc, #416]	@ (8004a14 <__ieee754_sqrt+0x1a8>)
 8004872:	ec55 4b10 	vmov	r4, r5, d0
 8004876:	43aa      	bics	r2, r5
 8004878:	462b      	mov	r3, r5
 800487a:	4621      	mov	r1, r4
 800487c:	d110      	bne.n	80048a0 <__ieee754_sqrt+0x34>
 800487e:	4622      	mov	r2, r4
 8004880:	4620      	mov	r0, r4
 8004882:	4629      	mov	r1, r5
 8004884:	f7fb ff10 	bl	80006a8 <__aeabi_dmul>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4620      	mov	r0, r4
 800488e:	4629      	mov	r1, r5
 8004890:	f7fb fd54 	bl	800033c <__adddf3>
 8004894:	4604      	mov	r4, r0
 8004896:	460d      	mov	r5, r1
 8004898:	ec45 4b10 	vmov	d0, r4, r5
 800489c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a0:	2d00      	cmp	r5, #0
 80048a2:	dc0e      	bgt.n	80048c2 <__ieee754_sqrt+0x56>
 80048a4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80048a8:	4322      	orrs	r2, r4
 80048aa:	d0f5      	beq.n	8004898 <__ieee754_sqrt+0x2c>
 80048ac:	b19d      	cbz	r5, 80048d6 <__ieee754_sqrt+0x6a>
 80048ae:	4622      	mov	r2, r4
 80048b0:	4620      	mov	r0, r4
 80048b2:	4629      	mov	r1, r5
 80048b4:	f7fb fd40 	bl	8000338 <__aeabi_dsub>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	f7fc f81e 	bl	80008fc <__aeabi_ddiv>
 80048c0:	e7e8      	b.n	8004894 <__ieee754_sqrt+0x28>
 80048c2:	152a      	asrs	r2, r5, #20
 80048c4:	d115      	bne.n	80048f2 <__ieee754_sqrt+0x86>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e009      	b.n	80048de <__ieee754_sqrt+0x72>
 80048ca:	0acb      	lsrs	r3, r1, #11
 80048cc:	3a15      	subs	r2, #21
 80048ce:	0549      	lsls	r1, r1, #21
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0fa      	beq.n	80048ca <__ieee754_sqrt+0x5e>
 80048d4:	e7f7      	b.n	80048c6 <__ieee754_sqrt+0x5a>
 80048d6:	462a      	mov	r2, r5
 80048d8:	e7fa      	b.n	80048d0 <__ieee754_sqrt+0x64>
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	3001      	adds	r0, #1
 80048de:	02dc      	lsls	r4, r3, #11
 80048e0:	d5fb      	bpl.n	80048da <__ieee754_sqrt+0x6e>
 80048e2:	1e44      	subs	r4, r0, #1
 80048e4:	1b12      	subs	r2, r2, r4
 80048e6:	f1c0 0420 	rsb	r4, r0, #32
 80048ea:	fa21 f404 	lsr.w	r4, r1, r4
 80048ee:	4323      	orrs	r3, r4
 80048f0:	4081      	lsls	r1, r0
 80048f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80048fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fe:	07d2      	lsls	r2, r2, #31
 8004900:	bf5c      	itt	pl
 8004902:	005b      	lslpl	r3, r3, #1
 8004904:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800490c:	bf58      	it	pl
 800490e:	0049      	lslpl	r1, r1, #1
 8004910:	2600      	movs	r6, #0
 8004912:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004916:	106d      	asrs	r5, r5, #1
 8004918:	0049      	lsls	r1, r1, #1
 800491a:	2016      	movs	r0, #22
 800491c:	4632      	mov	r2, r6
 800491e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004922:	1917      	adds	r7, r2, r4
 8004924:	429f      	cmp	r7, r3
 8004926:	bfde      	ittt	le
 8004928:	193a      	addle	r2, r7, r4
 800492a:	1bdb      	suble	r3, r3, r7
 800492c:	1936      	addle	r6, r6, r4
 800492e:	0fcf      	lsrs	r7, r1, #31
 8004930:	3801      	subs	r0, #1
 8004932:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004936:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800493a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800493e:	d1f0      	bne.n	8004922 <__ieee754_sqrt+0xb6>
 8004940:	4604      	mov	r4, r0
 8004942:	2720      	movs	r7, #32
 8004944:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004948:	429a      	cmp	r2, r3
 800494a:	eb00 0e0c 	add.w	lr, r0, ip
 800494e:	db02      	blt.n	8004956 <__ieee754_sqrt+0xea>
 8004950:	d113      	bne.n	800497a <__ieee754_sqrt+0x10e>
 8004952:	458e      	cmp	lr, r1
 8004954:	d811      	bhi.n	800497a <__ieee754_sqrt+0x10e>
 8004956:	f1be 0f00 	cmp.w	lr, #0
 800495a:	eb0e 000c 	add.w	r0, lr, ip
 800495e:	da42      	bge.n	80049e6 <__ieee754_sqrt+0x17a>
 8004960:	2800      	cmp	r0, #0
 8004962:	db40      	blt.n	80049e6 <__ieee754_sqrt+0x17a>
 8004964:	f102 0801 	add.w	r8, r2, #1
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	458e      	cmp	lr, r1
 800496c:	bf88      	it	hi
 800496e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004972:	eba1 010e 	sub.w	r1, r1, lr
 8004976:	4464      	add	r4, ip
 8004978:	4642      	mov	r2, r8
 800497a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800497e:	3f01      	subs	r7, #1
 8004980:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004984:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004988:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800498c:	d1dc      	bne.n	8004948 <__ieee754_sqrt+0xdc>
 800498e:	4319      	orrs	r1, r3
 8004990:	d01b      	beq.n	80049ca <__ieee754_sqrt+0x15e>
 8004992:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004a18 <__ieee754_sqrt+0x1ac>
 8004996:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004a1c <__ieee754_sqrt+0x1b0>
 800499a:	e9da 0100 	ldrd	r0, r1, [sl]
 800499e:	e9db 2300 	ldrd	r2, r3, [fp]
 80049a2:	f7fb fcc9 	bl	8000338 <__aeabi_dsub>
 80049a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4640      	mov	r0, r8
 80049b0:	4649      	mov	r1, r9
 80049b2:	f7fc f8f5 	bl	8000ba0 <__aeabi_dcmple>
 80049b6:	b140      	cbz	r0, 80049ca <__ieee754_sqrt+0x15e>
 80049b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80049bc:	e9da 0100 	ldrd	r0, r1, [sl]
 80049c0:	e9db 2300 	ldrd	r2, r3, [fp]
 80049c4:	d111      	bne.n	80049ea <__ieee754_sqrt+0x17e>
 80049c6:	3601      	adds	r6, #1
 80049c8:	463c      	mov	r4, r7
 80049ca:	1072      	asrs	r2, r6, #1
 80049cc:	0863      	lsrs	r3, r4, #1
 80049ce:	07f1      	lsls	r1, r6, #31
 80049d0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80049d4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80049d8:	bf48      	it	mi
 80049da:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80049de:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80049e2:	4618      	mov	r0, r3
 80049e4:	e756      	b.n	8004894 <__ieee754_sqrt+0x28>
 80049e6:	4690      	mov	r8, r2
 80049e8:	e7be      	b.n	8004968 <__ieee754_sqrt+0xfc>
 80049ea:	f7fb fca7 	bl	800033c <__adddf3>
 80049ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4640      	mov	r0, r8
 80049f8:	4649      	mov	r1, r9
 80049fa:	f7fc f8c7 	bl	8000b8c <__aeabi_dcmplt>
 80049fe:	b120      	cbz	r0, 8004a0a <__ieee754_sqrt+0x19e>
 8004a00:	1ca0      	adds	r0, r4, #2
 8004a02:	bf08      	it	eq
 8004a04:	3601      	addeq	r6, #1
 8004a06:	3402      	adds	r4, #2
 8004a08:	e7df      	b.n	80049ca <__ieee754_sqrt+0x15e>
 8004a0a:	1c63      	adds	r3, r4, #1
 8004a0c:	f023 0401 	bic.w	r4, r3, #1
 8004a10:	e7db      	b.n	80049ca <__ieee754_sqrt+0x15e>
 8004a12:	bf00      	nop
 8004a14:	7ff00000 	.word	0x7ff00000
 8004a18:	20000068 	.word	0x20000068
 8004a1c:	20000060 	.word	0x20000060

08004a20 <__ieee754_sqrtf>:
 8004a20:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004a24:	4770      	bx	lr
	...

08004a28 <_init>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr

08004a34 <_fini>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr
